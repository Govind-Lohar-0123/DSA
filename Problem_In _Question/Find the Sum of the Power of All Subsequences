class Solution {

   int mod=(1000000000+7);
    long dp[][][]=new long[100+1][100+1][100+1];
    long subSetSum(int nums[],int cnt,int n,int k){
        if(k==0)return pow((long)2,(long)nums.length-cnt);
        if(k<0)return 0;
        if(n<0)return 0;
        if(dp[n][k][cnt]!=-1)return dp[n][k][cnt];                //dp is not working what to do here 
        return dp[n][k][cnt]=((subSetSum(nums,cnt+1,n-1,k-nums[n])+subSetSum(nums,cnt,n-1,k))%mod);


    }
    long pow(long x,long n){
        if(n==0)return 1;
        if(n%2==0)return pow(x*x,n/2)%mod;
        return (x*pow(x,n-1))%mod;
    }
    public int sumOfPower(int[] nums, int s) {
        for(int i=0;i<101;i++){
            for(int j=0;j<101;j++){
                for(int k=0;k<101;k++){
                    dp[i][j][k]=-1;
                }
            }
        }
        return (int)subSetSum(nums,0,nums.length-1,s);
    }
}
