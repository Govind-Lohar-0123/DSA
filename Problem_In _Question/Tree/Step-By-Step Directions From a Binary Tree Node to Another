
class Solution {

    private TreeNode lowestCommonAncestor(TreeNode root, int src, int dest) {
        if (root == null) {
            return null;
        }
        
        if (root.val == src || root.val == dest) {
            return root;
        }
        
        TreeNode left = lowestCommonAncestor(root.left, src, dest);
        TreeNode right = lowestCommonAncestor(root.right, src, dest);
        
        if (left != null && right != null) {
            return root;
        }
        
        return left != null ? left : right;
    }

   String findPath(TreeNode root,int x,String dir,boolean flag){
        if(root==null)return "";
        if(root.val==x)return dir;
            
        String left=findPath(root.left,x,dir+((flag)?"U":"L"),flag);  // why MLE
        String right=findPath(root.right,x,dir+((flag)?"U":"R"),flag);
        
        return left+right;
     }
    
    public String getDirections(TreeNode root, int startValue, int destValue) {
        TreeNode LCA = lowestCommonAncestor(root, startValue, destValue);

        String lcaToStart = findPath(LCA, startValue, "",true);
        String lcaToDest =  findPath(LCA, destValue, "",false);
      
        
    

        StringBuilder result = new StringBuilder();

        for (int i = 0; i < lcaToStart.length(); i++) {
            result.append('U');
        }

        result.append(lcaToDest);

        return result.toString();
    }
}



   
