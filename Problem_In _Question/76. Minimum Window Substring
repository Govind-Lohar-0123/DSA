class Solution {
public:
    vector<vector<int>>map;
    int freq[53];
    int sIdx=-1,e=-1;
    int size=0;
    void binarySearch(string &s,string &t,int i){
        int r=s.size()-1,l=i;
        while(l<=r){
            int mid=(l+r)>>1;
            bool isSubStr=checkIsSubStr(i,mid,t);
            
            if(isSubStr){
                int currSize=(mid-i+1);
                if(currSize<size || sIdx==-1){sIdx=i,e=mid;size=currSize;}
                r=mid-1;
            }
            else l=mid+1;
        }
        
    }

    bool checkIsSubStr(int i,int j,string &t){
        int n=t.size();
            
            
            for(int k=0;k<=52;k++){
                int fr=(i>0)?(map[j][k]-map[i-1][k]):map[j][k];
                
                if(freq[k]<=fr)continue;
                return false;
            }
        
        return true;

    }

    void fillCharacterFreq(string &s)
    {   int n=s.size();
        
        for(int i=0;i<n;i++){
            int ch=(s[i]>=97)?(s[i]-'a') : (s[i]-'A' + 26);
            for(int j=0;j<=52;j++){
                map[i][j]=(i>0)?map[i-1][j]:0;
                
            }
           
            map[i][ch]++;
        }


    }
    string minWindow(string ss, string t) {
        map=vector<vector<int>>(100000,vector<int>(53,0));
        int n=ss.size();
        fillCharacterFreq(ss);
        memset(freq,0,sizeof(freq));
        for(int i=0;i<t.size();i++)freq[(t[i]>=97)?(t[i]-'a') : (t[i]-'A' + 26)]++;
        for(int i=0;i<n;i++) binarySearch(ss,t,i);
        
        if(size==0)return "";
        
        return ss.substr(sIdx,(e-sIdx+1));
        
    }
};
