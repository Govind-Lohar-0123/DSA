class Solution {
    int dp[][]=new int[101][101];
    int solve(int n,int m,int grid[][]){
        // if(m<0 || m>=grid[0].length)return 100000;
        // if(n==0)return grid[0][m];
        // if(dp[n][m]!=-1)return dp[n][m];         why tle in this problem
        // //all the stufs
        // int left=solve(n-1,m-1,grid);
        // int top=solve(n-1,m,grid);
        // int right=solve(n-1,m+1,grid);
        // return dp[n][m]=Math.min(left,Math.min(right,top))+grid[n][m];

        for(int i=0;i<=n;i++){
            for(int j=0;j<=m;j++){
              
               if(i==0)dp[i][j]=grid[0][j];
               else{
                int val=100000;
                int left=(j-1>=0)?dp[i-1][j-1]:val;
                int top=dp[i-1][j];
                int right=(j+1<=m)?dp[i-1][j+1]:val;
                dp[i][j]=Math.min(left,Math.min(right,top))+grid[i][j];

               }
            }
        }
        return dp[n][m];


    }
    public int minFallingPathSum(int[][] matrix) {
        int ans=100000;
        //  for(int k=0;k<101;k++){
        //     for(int j=0;j<101;j++){
        //         dp[k][j]=-1;
        //     }
        // }
        solve(matrix.length-1,matrix.length-1,matrix);
        for(int i=0;i<matrix.length;i++){
          ans=Math.min(ans,dp[matrix.length-1][i]);   
        }
        return ans;
        
    }
}
