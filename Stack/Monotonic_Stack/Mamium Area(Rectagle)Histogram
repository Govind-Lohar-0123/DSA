class Solution {

    int []NSL(int []nums){
        
        int m=nums.length;
        int nsl[]=new int[m];
        nsl[0]=-1;
        for(int i=1;i<m;i++){
            if(nums[i-1]<nums[i])nsl[i]=i-1;
            else {
                int j=nsl[i-1];
                while(j>=0 && nums[i]<=nums[j])
                    j=nsl[j];
                nsl[i]=j;
            }
        }
        return nsl;
    }

     int []NSR(int []nums){
        
        int m=nums.length;
        int nsr[]=new int[m];
        nsr[m-1]=m;
        for(int i=m-2;i>=0;i--){
            if(nums[i+1]<nums[i])nsr[i]=i+1;
            else {
                int j=nsr[i+1];
                while(j<m && nums[i]<=nums[j])
                    j=nsr[j];
                nsr[i]=j;
            }
        }
        
    return nsr;
        
        
    }
    int MAH(int []mat){
         
        int m=mat.length;
        int max=0;
        int nsl[]=NSL(mat);
        int nsr[]=NSR(mat);
    
         for(int i=0;i<m;i++){
            max=Math.max(max,(nsr[i]-nsl[i]-1)*mat[i]);
        }
            System.out.println(max);
        return max;
    }

    public int maximalRectangle(char[][] mat) {
        int ans=0;
        int mah[]=new int[mat[0].length];
        for(int i=0;i<mat.length;i++){
           for(int j=0;j<mat[0].length;j++){
                if(mat[i][j]=='0')mah[j]=0;
                else mah[j]=mah[j]+1 ;
               
              
            }
             ans=Math.max(ans,MAH(mah));
        }
        return ans;
    }
}
