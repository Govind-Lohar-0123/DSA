class Solution {
public:
    int bit[32] = {0}; 
    
    int longestNiceSubarray(vector<int>& arr) {
        int n = arr.size();
        int ans = 1;
        int i = 0, j = 0; 
        
        auto addBit = [this](int val) {  // Capture 'this' to access 'bit'
            for (int i = 0; i <= 31; i++) {
                if (((1 << i) & val) > 0) bit[i]++;  // Fix: Use 'i' instead of 'bit'
            }
        };

        auto removeBit = [this](int val) {  // Capture 'this' to access 'bit'
            for (int i = 0; i <= 31; i++) {
                if (((1 << i) & val) > 0) bit[i]--;  // Fix: Use 'i' instead of 'bit'
            }
        };

        auto isNiceSubarray = [this]() {  // Capture 'this' to access 'bit'
            for (int i = 0; i <= 31; i++) {
                if (bit[i] > 1) return false;
            }
            return true;
        };

        while (j < n) {
            addBit(arr[j]);
            while (!isNiceSubarray()) {
                removeBit(arr[i++]);
            }

            ans = max(ans, j - i + 1);  // Fix: Use max() to update ans
            j++;
        }
        return ans;
    }
};
