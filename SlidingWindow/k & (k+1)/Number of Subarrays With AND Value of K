class Solution {
     int bit[]=new int[32];
    void addNum(int n){
        for(int i=0;i<32;i++){
          
            if(((1<<i) & n)>0)bit[i]++;
        }
        
    }
    void removeNum(int n){
        for(int i=0;i<32;i++){
            if(((1<<i) & n )>0)bit[i]--;
        }
    }
    long getAnd(int len){
        long ans=0;
        for(int i=0;i<32;i++){
           if(bit[i]==len)ans+=(1<<i);
        }
      
        return ans;
    }
    long countSub(int nums[],int k){
        int i=0,j=0;
        bit=new int[32];
        long ans=0;
        while(j<nums.length){
            addNum(nums[j]);
           
            while((i<=j) &&  getAnd(j-i+1)<k)removeNum(nums[i++]);
            ans+=(j-i+1);
            j++;
        }
        return ans;
    }
    public long countSubarrays(int[] nums, int k) {
        long a=(countSub(nums,k));
         long b=(countSub(nums,k+1));
         
         return a-b;
        
    }
}
