import java.util.*;
class SegmentTree{
    int seg[]=null;
    int lazy[]=null;
    SegmentTree(int n){
        seg=new int[n*4+1];
        lazy=new int[n*4+1];
    }
    
public void build(int i,int low,int high,int freq[])
{
    if(low==high){
        seg[i]=freq[low];
        return ;
    }
    
    int mid=(low+high)>>1;
    build(2*i+1,low,mid,freq);
    build(2*i+2,mid+1,high,freq);
    seg[i]=seg[2*i+1]+seg[2*i+2];
}
public void update(int i,int l,int r,int low,int high,int v){
    if(lazy[i]!=0){
        if(lazy[i]==1)seg[i]=(high-low+1)-seg[i];
        if(low!=high){
            lazy[2*i+1] ^=lazy[i];
            lazy[2*i+2] ^=lazy[i];
        }
        lazy[i]=0;
        
        
    }
    
    if(high<l || r<low)return ;
    else if(low>=l && high<=r){
        if((lazy[i] ^ v)==1)seg[i]=(high-low+1)-seg[i];
        if(low!=high){
            lazy[2*i+1] ^=v;
            lazy[2*i+2] ^=v;
        }
     return ;
    }
    int mid=(low+high)>>1;
    update(2*i+1,l,r,low,mid,v);
    update(2*i+2,l,r,mid+1,high,v);
   seg[i]= seg[2*i+1]+seg[2*i+2];
    
   
}
public int getRangeSum(int i,int l,int r,int low,int high){
   
    
   if(lazy[i]!=0){
        if(lazy[i]==1)seg[i]=(high-low+1)-seg[i];
        if(low!=high){
            lazy[2*i+1] ^=lazy[i];
            lazy[2*i+2] ^=lazy[i];
        }
        lazy[i]=0;
    }
    
    if(high<l || r<low)return 0;
    else if(low>=l && high<=r)return seg[i];
    int mid=(low+high)>>1;
    int left=getRangeSum(2*i+1,l,r,low,mid);
    int right=getRangeSum(2*i+2,l,r,mid+1,high);
  return left+right;
    
}
}
public class Main{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
       
       
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
            
        }
        
        SegmentTree st=new SegmentTree(n);
        st.build(0,0,n-1,arr);
        int m=sc.nextInt();
        while(m-->0){
            int type=sc.nextInt();
            int l=sc.nextInt();
            int r=sc.nextInt();
            if(type==1)st.update(0,l,r,0,n-1,1);
            else{
                System.out.println(st.getRangeSum(0,l,r,0,n-1));
            }
            
        }
        
        
        
    }
}

