class SegmentTree{

    public :
    vector<int>seg;
     SegmentTree(int n){
        seg.resize(4*n,0);

     }


    int query(int idx,int l,int r,int low,int high){
      

        //Not Overlapp
        if(r<low || high<l)return 0;

        // Partial Ovelapp

        if(l<=low && high<=r){
           
            return seg[idx];
        }


        // move child sides
        int mid=(low+high)>>1;
        int left=query((2*idx+1),l,r,low,mid);
        int right=query((2*idx+2),l,r,mid+1,high);
        return left + right;
    }
    
    void update(int idx, int i, int low, int high) {
        if (low==high) {
            seg[idx] = 1;
            return;
        }

        int mid = (low + high) >> 1;
        if (i <= mid)
            update(2 * idx + 1, i, low, mid);
        else
            update(2 * idx + 2, i, mid + 1, high);

        seg[idx] = seg[2 * idx + 1] + seg[2 * idx + 2];
    }


};

class Solution {
public:
    long long goodTriplets(vector<int>& nums1, vector<int>& nums2) {
        int n=nums1.size();
        unordered_map<int,int>map;
        for(int i=0;i<n;i++){
            map[nums2[i]]=i;
        }
         SegmentTree seg(n);
        long long ans=0;
        for(int i=0;i<n;i++){
            int idx = map[nums1[i]];

            int leftCommonCnt = seg.query(0, 0, idx - 1, 0, n - 1);
            int leftUnCommonCnt = i - leftCommonCnt;
            int rightCommonCnt = (n - idx - 1) - leftUnCommonCnt;

            ans += (long long)leftCommonCnt * rightCommonCnt;

            seg.update(0, idx, 0, n - 1);
        }
        return ans;
    }
};
