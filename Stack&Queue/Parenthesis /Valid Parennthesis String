1]using dp ->O(3^N)
2]mEmoazation ->O(N^2)
3]bUTTO UP CAN DO
4]TWO STACK ONE PARENTHESI IDX AND SEC START IDX
5]LEFT RIGHT APPROACH


class Solution {
    
    // boolean solve(String s){
    //     Stack<Integer> st=new Stack<>();
    //     Stack<Integer>lastStar=new Stack<>();
    //     for(int i=0;i<s.length();i++){
    //         if(s.charAt(i)=='*')lastStar.push(i);
    //         else if(s.charAt(i)=='(')st.push(i);
    //         else {
    //             if(st.size()!=0)st.pop();
    //             else if(lastStar.size()==0)return false;
    //             else lastStar.pop();
    //         }
    //     }

    //     while(lastStar.size()!=0 && st.size()!=0 && lastStar.peek()>st.peek()){
    //         lastStar.pop();st.pop();
    //     }
    //     return st.size()==0;
    
    // }
    boolean solve(String s){
        int open=0,close=0;
        // left to right
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='(' || s.charAt(i)=='*')open++;
            else open--;
            if(open<0)return false;
        }
        // right to left
        for(int i=s.length()-1;i>=0;i--){
            if(s.charAt(i)==')' || s.charAt(i)=='*')close++;
            else close--;
            if(close<0)return false;
        }

        return true;
    }



    // int dp[][]=new int[100+1][100+1];
    // boolean solve(String s,int i, int open){
    //     if(i==s.length())return open==0;
    //     boolean isValid=false;
    //     if(dp[i][open]!=-1)return dp[i][open]==1;
    //     if(s.charAt(i)=='*'){
    //         isValid=solve(s,i+1,open+1);
    //         isValid|=solve(s,i+1,open);
    //         if(open>0) isValid|=solve(s,i+1,open-1);
            
    //     }
    //     else if(s.charAt(i)==')' && open>0)isValid=solve(s,i+1,open-1);
    //     else if(s.charAt(i)=='(') isValid=solve(s,i+1,open+1);
    //      dp[i][open] =(isValid)? 1 : 0;
    //      return isValid;
    // }




    // boolean solve(String s,int i, int open){
    // boolean dp[][]=new boolean[100+1][100+1];

    //    int n=s.length();
    //    dp[n][0]=true;
    //    for( i=n-1;i>=0;i--){
    //     for(int j=0;j<n;j++){
    //         boolean isValid=false;
        
    //         if(s.charAt(i)=='*'){
    //             isValid=dp[i+1][j+1];
    //             isValid|=dp[i+1][j];
    //             if(j>0) isValid|=dp[i+1][j-1];
    //         }
    //         else if(s.charAt(i)==')' && j>0)isValid=dp[i+1][j-1];
    //         else if(s.charAt(i)=='(') isValid=dp[i+1][j+1];;
    //         dp[i][j] =isValid;
         
    //     }
    //    }
    //    return dp[0][0];
    // }
    public boolean checkValidString(String s) {
        // for(int i=0;i<100+1;i++){
        //     for(int j=0;j<100+1;j++){
        //         dp[i][j]=-1;
        //     }
        // }
        return solve(s);
        
    }
}


