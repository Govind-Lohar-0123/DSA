class Solution {
public:
    typedef long long ll;
    struct Node{
        ll time;
        int move;
        int i,j;
        Node(ll t,int ii,int jj){
            time=t;
            i=ii;j=jj;
        }

        
    };
    
    struct comp{
        bool operator()(const Node* a,const Node* b){
            return a->time > b->time;
        }
    };
    
    int minTimeToReach(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int vis[n][m];
        
        memset(vis,false,sizeof(vis));
        
        priority_queue<Node*,vector<Node*>,comp>pq;
        pq.push(new Node(0,0,0));
        while(pq.size()!=0){
            Node* it=pq.top();
            pq.pop();
            
            ll time=it->time;
            
            int i=it->i;
            int j=it->j;

            if(i==n-1 && j==m-1)return time;
            if(j+1<m && vis[i][j+1]==false){ //right
                vis[i][j+1]=true;
                ll currTime=max(time,(ll)(grid[i][j+1]));
                currTime+=1;
                pq.push(new Node(currTime,i,j+1));
            }
            if(i+1<n && vis[i+1][j]==false){ //bottom
               
                vis[i+1][j]=true;
                ll currTime=max(time,(ll)(grid[i+1][j]));
                currTime+=1;
                pq.push(new Node(currTime,i+1,j));
            }
            if(i-1>=0 && vis[i-1][j]==false){ //top
               
                vis[i-1][j]=true;
                ll currTime=max(time,(ll)(grid[i-1][j]));
                currTime+=1;
                pq.push(new Node(currTime,i-1,j));
            }
            if(j-1>=0 && vis[i][j-1]==false){
               
                vis[i][j-1]=true;
                ll currTime=max(time,(ll)(grid[i][j-1]));
                currTime+=1;
                pq.push(new Node(currTime,i,j-1));
            }


        }
        return 0;
    }
};3341. Find Minimum Time to Reach Last Room I
