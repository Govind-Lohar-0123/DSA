class Solution{
    public:
   unordered_set<int>st;
    int timer=0;
    vector<int>currTime,minTime;
    void solve(int u,int p,vector<int>graph[]){
        currTime[u]=timer;
        minTime[u]=timer++;
        int child=0;
        
        for(int v : graph[u]){
            if(v==p)continue;
          
            if(currTime[v]==-1){
                child++;
                solve(v,u,graph);
              
              
                
                if(currTime[u]<=minTime[v] && p!=-1){
                   
                   st.insert(u);
                }
               
                minTime[u]=min(minTime[u],minTime[v]);
            }
            
            else minTime[u]=min(minTime[u],minTime[v]);
        }
        
        if(p==-1 && child>1)st.insert(u);
        
    }
     
    vector<int> articulationPoints(int n, vector<int>adj[]) {
        
    
        currTime.resize(n,-1);
        minTime.resize(n,-1);
       
       solve(0,-1,adj);
       if(st.size()>0){
           vector<int>t={st.begin(),st.end()};
           sort(t.begin(),t.end());
           return t;
       }
       return {-1};
    }
};
