class Pair{
    int r,c;
    Pair(int r,int c){
        this.r=r;
        this.c=c;
    }
}

class Solution {
    public int[][] highestPeak(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        Queue<Pair>q=new LinkedList<Pair>();
        boolean vis[][]=new boolean[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    vis[i][j]=true;
                    q.offer(new Pair(i,j));
                }
                grid[i][j]=0;
                              
            }
        }
        int dr[]={-1,1,0,0};
        int dc[]={0,0,-1,1};
        while(q.size()!=0){
            Pair p=q.poll();
            int val=grid[p.r][p.c];
            for(int i=0;i<4;i++){
                int nr=dr[i] + p.r;
                int nc=dc[i] + p.c;
                if(nr>=0 && nc>=0 && nr<n && nc<m && vis[nr][nc]==false){
                    q.offer(new Pair(nr,nc));
                    grid[nr][nc]=val+1;
                    vis[nr][nc]=true;
                }
            }
        }
        return grid;
        


    }
}
