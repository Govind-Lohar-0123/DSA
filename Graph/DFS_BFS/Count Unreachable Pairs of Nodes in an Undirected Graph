class DisjointSet{
    int [] par,size;
    int components;
    DisjointSet(int n){
        components=n;
        par=new int[n];
        size=new int[n+1];
        for(int i=0;i<n;i++){
            par[i]=i;
            size[i]=1;
        }
    }
    public int getPar(int u){
        if(par[u]==u)return u;
        return par[u]=getPar(par[u]);
    }
    public void unionByRank(int u,int v){
        int up=getPar(u);
        int vp=getPar(v);
        if(up==vp)return ;
        if(size[up]==size[vp]){
            par[vp]=up;
            size[up]+=size[vp];
        }
        else if(size[up]>size[vp]){
            par[vp]=up;
            size[up]+=size[vp];
        }
        else{
            par[up]=vp;
            size[vp]+=size[up];
        } 
        components--;
    }
}

class Solution {
    public long countPairs(int n, int[][] edges) {
        long ans=0;
        DisjointSet ds=new DisjointSet(n);
        for(int it[] : edges)ds.unionByRank(it[0],it[1]);
        long sum=0;
        for(int i=0;i<n;i++){
            if(ds.par[i]==i){
                ans+=(sum*ds.size[i]);
                sum+=ds.size[i];
                
               
            }
        }
        return ans;
    }
}
