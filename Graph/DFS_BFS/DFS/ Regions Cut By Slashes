class Solution {
public:
    void dfs(int row,int col,vector<vector<int>>&grid){
        grid[row][col]=1;
        int nr[]={1,-1,0,0};
        int nc[]={0,0,1,-1};
        for(int i=0;i<4;i++){
            int r=nr[i]+row;
            int c=nc[i]+col;
            if(r>=0 && c>=0 && r<grid.size() && c<grid.size() && grid[r][c]==0)
                dfs(r,c,grid);
        }
    }
    int regionsBySlashes(vector<string>& grid) {
        int n=grid.size();
        int m=grid[0].size();
       vector<vector<int>>mat(n*3,vector<int>(m*3,0));
       for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==' ')continue;
                int c=(j*3);
                int r=(i*3);
                if(grid[i][j]=='/'){
                    c+=2;
                    mat[r][c]=1;
                    mat[r+1][c-1]=1;
                    mat[r+2][c-2]=1;
                }
                else {
                    mat[r][c]=1;
                    mat[r+1][c+1]=1;
                    mat[r+2][c+2]=1;
                }
            }
       }
       int ans=0;
       for(int i=0;i<n*3;i++){
            for(int j=0;j<m*3;j++){
                if(mat[i][j]==0){
                    ans++;
                    dfs(i,j,mat);
                }
            }
       }
       return ans;
    }
};