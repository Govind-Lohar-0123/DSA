1]simple approach n^3
2]simple n^2 with sorted run loop 0->n-1 make this i acstors for child
3]my approach change direction then do travers n^2
4]topological sort 


class Solution {
    List<List<Integer>> ans=new ArrayList<>();
    public List<List<Integer>> getAncestors(int n, int[][] edges) {
        ArrayList<ArrayList<Integer>> grid=new ArrayList<>();
        Queue<Integer>q=new LinkedList<>();
        int ind[]=new int[n];
        for(int i=0;i<n;i++){
            grid.add(new ArrayList<>());
        }
        for(int it[] : edges){
            grid.get(it[0]).add(it[1]);
            ind[it[1]]++;
        }
        for(int i=0;i<n;i++){
            if(ind[i]==0)q.add(i);
        }
        ArrayList<Integer>order=new ArrayList<>();

        
        while(q.size()!=0){
            int u=q.poll();
            order.add(u);
            for(int v : grid.get(u)){
                ind[v]--;
                if(ind[v]==0){
                    q.add(v);
                }
            }
        }
        ArrayList<boolean[]>temp=new ArrayList<>();
        for(int i=0;i<n;i++)temp.add(new boolean[n]);
        for(int u : order){
            for(int v : grid.get(u)){
                temp.get(v)[u]=true;
                for(int i=0;i<n;i++){
                    if(temp.get(u)[i]==true)temp.get(v)[i]=true;
                }
            }

        }
        for(int i=0;i<n;i++){
            ArrayList<Integer>t=new ArrayList<>();
            for(int j=0;j<n;j++){
                if(temp.get(i)[j]==true)t.add(j);
            }
            ans.add(t);
        }
        return ans;
        




    }
}

class Solution {
    ArrayList<Integer> sort(ArrayList<Integer> temp,int n){
        int map[]=new int[n];
        for(int it : temp){
            map[it]=1;
        }
        temp.clear();
        for(int i=0;i<n;i++){
            if(map[i]!=0)temp.add(i);
        }
        return temp;
        
    }
ArrayList<Integer> getAncestors(int u,ArrayList<ArrayList<Integer>>grid,ArrayList<Integer> temp,boolean vis[]){
        
        
        
        
        vis[u]=true;
        for(int v : grid.get(u)){
            if(vis[v]==false){
                temp.add(v);
                getAncestors(v,grid,temp,vis);
            }
        }
        return temp;
    }
    public List<List<Integer>> getAncestors(int n, int[][] edges) {
        
        ArrayList<ArrayList<Integer>>grid=new ArrayList<>();
        for(int i=0;i<n;i++)grid.add(new ArrayList<>());
        for(int it[] : edges){
            grid.get(it[1]).add(it[0]);
        }
        List<List<Integer>> ans=new ArrayList<>();
        for(int i=0;i<n;i++){
            ArrayList<Integer> temp=getAncestors( i,grid,new ArrayList<>(),new boolean[n]);
            Collections.sort(temp);
            // ans.add(temp);
            ans.add(sort(temp,n));       
         }
    return ans;
    }

}

class Solution {
      List<List<Integer>> ans=new ArrayList<>();
    ArrayList<Integer> sort(ArrayList<Integer> temp,int n){
        int map[]=new int[n];
        for(int it : temp){
            map[it]=1;
        }
        temp.clear();
        for(int i=0;i<n;i++){
            if(map[i]!=0)temp.add(i);
        }
        return temp;
        
    }
ArrayList<Integer> getAncestors(int u,int p,ArrayList<ArrayList<Integer>>grid,ArrayList<Integer> temp,boolean vis[]){
        
        
        
        
        vis[u]=true;
        for(int v : grid.get(u)){

            if(vis[v]==false){
                temp.add(v);
                
                if(v<p){
                 
                    for(int it :  ans.get(v)){
                        if(vis[it]==false){
                            temp.add(it);
                            vis[it]=true;
                        }
                    }
                }
                else getAncestors(v,p,grid,temp,vis);
            }
            
        }
        return temp;
    }
    public List<List<Integer>> getAncestors(int n, int[][] edges) {
        
        ArrayList<ArrayList<Integer>>grid=new ArrayList<>();
        for(int i=0;i<n;i++)grid.add(new ArrayList<>());
        for(int it[] : edges){
            grid.get(it[1]).add(it[0]);
        }
       
        for(int i=0;i<n;i++){
            ArrayList<Integer> temp=getAncestors( i,i,grid,new ArrayList<>(),new boolean[n]);
            // Collections.sort(temp);
            // ans.add(temp);
            ans.add(sort(temp,n));
                   
         }
    return ans;
    }

}
