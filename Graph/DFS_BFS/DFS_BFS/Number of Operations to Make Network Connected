class Solution {
    public int makeConnected(int n, int[][] grid) {
       
        int m=grid.length;
        if(m<=n-2)return -1;
        ArrayList<ArrayList<Integer>> g=new ArrayList<>();
        for(int i=0;i<n;i++)
            g.add(new ArrayList<>());
        for(int it[] : grid)
        {g.get(it[0]).add(it[1]);g.get(it[1]).add(it[0]);}
        boolean vis[]=new boolean[n+1];
        int cnt=0;
        
        for(int i=0;i<n;i++)
        {
            if(vis[i]==false)
            {cnt++;dfs(i,vis,g);}
        }
        return cnt-1;

    }


    void dfs(int u,boolean vis[],ArrayList<ArrayList<Integer>>grid){
        vis[u]=true;
        for(int it : grid.get(u))
            if(vis[it]==false)
                dfs(it,vis,grid);
    }
}
