class Solution {
    int low[]=new int[100000+1];
    int time[]=new int[100000+1];
    boolean vis[]=new boolean [1000000+1];
    List< List <Integer> > ans=new ArrayList<>();
    int timer=0;
    void dfs(int u,int p,List<List<Integer>> grid ,int n,int m ){
        vis[u]=true;
        timer++;
        low[u]=time[u]=timer;
        for(int it : grid.get(u)){
            if(it==p)continue;
            if(vis[it]==false){
                dfs(it,u,grid,n,m);
            }
            low[u]=Math.min(low[u],low[it]);
            if(time[u]<low[it]){
                ans.add(new ArrayList<>(Arrays.asList(it,u)));
            }
        }
        
    }
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>>g) {
       List<List<Integer>> grid=new ArrayList<>();
       
       int m=g.get(0).size();
       for(int i=0;i<n;i++){
           grid.add(new ArrayList<>());
       }
       for(List<Integer> it :  g){
           grid.get(it.get(0)).add(it.get(1));
           grid.get(it.get(1)).add(it.get(0));
       }

        dfs(0,-1,grid,n,m);
        return ans;
        
    }
}
