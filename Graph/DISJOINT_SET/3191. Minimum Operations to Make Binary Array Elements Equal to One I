class DisjointSet{
    vector<int>par;
    vector<int>rank;
public:
    DisjointSet(int n){
        par=vector<int>(n,0);
        rank=vector<int>(n,1);
        for(int i=0;i<n;i++)par[i]=i;

    }

void unionByRank(int u,int v){
	int up=getPar(u);
	int vp=getPar(v);
	
	if(up==vp)return ;
	else if(rank[up]==rank[vp]){
	par[vp]=up;
	rank[up]++;

}

else if(rank[up]>rank[vp])par[vp]=up;
else par[up]=vp;


}

int getPar(int u){
	if(par[u]==u)return u;
	return par[u]=getPar(par[u]);

}
	




    
};

class Solution {
public:
    vector<int> minimumCost(int n, vector<vector<int>>& edges, vector<vector<int>>& query) {
        DisjointSet ds(n);
	    vector<int>temp(n,-1);
        for(const auto&it : edges){
            int u=it[0];
            int v=it[1];
            ds.unionByRank(u,v);
        
           
        }
	    for(const auto&it : edges){
            int u=it[0];
            int v=it[1];
            int p=ds.getPar(u);
        
            if(temp[p]==-1)temp[p]=it[2];
            else temp[p]=(temp[p] & it[2]);
        }

	   vector<int>ans;

	    for(const auto&it :query){
            int u=it[0];
            int v=it[1];
            int up=ds.getPar(u);
            int vp=ds.getPar(v);
           
            if(up!=vp)ans.push_back(-1);
            else ans.push_back(temp[up]);

        }
        return ans;


    }
};
