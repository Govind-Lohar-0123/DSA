class DisjointSet{
    int [] par,rank;
    int components;
    DisjointSet(int n){
        components=n;
        par=new int[n];
        rank=new int[n+1];
        for(int i=0;i<n;i++){
            par[i]=i;
            rank[i]=1;
        }
    }
    public int getPar(int u){
        if(par[u]==u)return u;
        return par[u]=getPar(par[u]);
    }
    public void unionByRank(int u,int v){
        int up=getPar(u);
        int vp=getPar(v);
        if(up==vp)return ;
        if(rank[up]==rank[vp]){
            par[vp]=up;
            rank[up]++;
        }
        else if(rank[up]>rank[vp])par[vp]=up;
        else par[up]=vp;
        components--;
    }
}

class Solution {
    public int makeConnected(int n, int[][] connections) {
        int m=connections.length;
        if(m<=n-2)return -1;
        DisjointSet ds=new DisjointSet(n);
        for(int it[] : connections)ds.unionByRank(it[0],it[1]);
        int disComp=0;
        for(int i=0;i<n;i++){
            if(ds.par[i]==i)disComp++;
        }
        int rem_ver=n-disComp;
         m-=rem_ver;
        if(m<disComp-1)return -1;
        return disComp-1;
    }
}
