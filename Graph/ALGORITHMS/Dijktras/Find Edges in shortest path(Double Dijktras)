class Solution {
    
    long dis[]=new long[1];
    boolean vis[]=new boolean[10000*6];
    long[] solve(ArrayList<ArrayList<ArrayList<Integer>>>grid ,int i){
        PriorityQueue<int[]>pq=new PriorityQueue<>((a,b)->a[1]-b[1]);

        pq.add(new int[]{i,0});
        while(pq.size()!=0){
            int u[]=pq.remove();
            if(vis[u[0]])continue;
            dis[u[0]]=u[1];
            vis[u[0]]=true;
            for(ArrayList<Integer> v : grid.get(u[0])){
                if(vis[v.get(0)]==false){
                    pq.add(new int[]{v.get(0),u[1]+v.get(1)});
                }
            }
        }
        return dis;

    }

    public boolean[] findAnswer(int n, int[][] edges) {
        ArrayList<ArrayList<ArrayList<Integer>>>grid=new ArrayList<>();
        for(int i=0;i<n;i++){
            grid.add(new ArrayList<>());
        }
        for(int it[] : edges){
            grid.get(it[0]).add(new ArrayList<>(Arrays.asList(it[1],it[2])));
            grid.get(it[1]).add(new ArrayList<>(Arrays.asList(it[0],it[2])));
        }
        dis=new long[n];
        Arrays.fill(dis,Integer.MAX_VALUE);
        dis[0]=0;
        
        long leftDis[]=solve(grid,0);
        long shortDis=leftDis[n-1];
        dis=new long[n];
        Arrays.fill(vis,false);
        Arrays.fill(dis,Integer.MAX_VALUE);
        dis[n-1]=0;
        long rightDis[]=solve(grid,n-1);
        
        boolean ans[]=new boolean[edges.length];
        for(int i=0;i<edges.length;i++){
            int it[]=edges[i];
            int u=it[0];
            int v=it[1];
            int wt=it[2];
            if(leftDis[u]+wt+rightDis[v]==shortDis)ans[i]=true;
            if(leftDis[v]+wt+rightDis[u]==shortDis)ans[i]=true;
        }
        return ans;
    }
}
