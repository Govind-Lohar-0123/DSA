

class Solution {
    int [] bfs(int [][]grid,int r,int c,int n,int m){
        Queue<int[]>q=new LinkedList<>();
        q.add(new int[]{r,c});
        int ans[]=new int[4];
        ans[0]=r;ans[1]=c;
        grid[r][c]=0;

        while(q.size()!=0){
            int it[]=q.remove();
            if(q.size()==0){
                ans[2]=it[0];
                ans[3]=it[1];
            }
            int nr[]={0,1,0,-1};
            int nc[]={1,0,-1,0};
            for(int i=0;i<4;i++)
            {
                r=nr[i]+it[0];
                c=nc[i]+it[1];
                if(r<n && r>=0 && c<m && c>=0 && grid[r][c]==1){
                    grid[r][c]=0;
                    q.add(new int[]{r,c});
                }
            }

        }
        
        return ans;


    }

    public int[][] findFarmland(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        ArrayList<int[]>ans=new ArrayList<>();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1)
                {   
                    
                    ans.add(bfs(grid,i,j,n,m));
                }
            }
        }

        int res[][]=new int[ans.size()][4];
        for(int i=0;i<ans.size();i++)
        {
            res[i]=ans.get(i);
        }
        return res;
    }
}
