class Solution {
    
    
    
    public int[] minimumTime(int n, int[][] edges, int[] diss) {
        ArrayList<ArrayList<ArrayList<Integer>>>grid=new ArrayList<>();
        
        for(int i=0;i<n+1;i++){
            grid.add(new ArrayList<>());
        }
        for(int it[] : edges){
            grid.get(it[0]).add(new ArrayList<>(Arrays.asList(it[1],it[2])));
            grid.get(it[1]).add(new ArrayList<>(Arrays.asList(it[0],it[2])));
        }
        int dis[]=new int[n];
        boolean vis[]=new boolean[n];

         Arrays.fill(dis,-1);
         dis[0]=0;

       
        PriorityQueue<int []>pq=new PriorityQueue<>((a,b)->(a[1]-b[1]));
         pq.add(new int[]{0,0});

    //vis[node]because pq will give the first mid dis node why the remaing node with max is in pq the again come and iterate ans push other node we can prevent that only one iterate
    

        while(pq.size()!=0){
            int u[]=pq.remove();
            int d=u[1];
            int node=u[0];
            if(vis[node]==true || d>=diss[node])continue;
            dis[node]=d;
            vis[node]=true;
            for(ArrayList<Integer> v :grid.get(u[0])){
                if(vis[v.get(0)]==false){
                   
                    pq.add(new int[]{v.get(0),d+v.get(1)});
                }
                
            }
        }
        
       
        return dis;
    }
}
