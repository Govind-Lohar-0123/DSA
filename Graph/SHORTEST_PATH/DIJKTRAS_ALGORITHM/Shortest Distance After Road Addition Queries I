class Solution {
public:
    int solve( vector<vector<int>> & graph,int n){
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>pq;
    
        bool vis[n];
        fill(vis,vis+n,0);
        
        pq.push({0,0});
        int dis[n];
        fill_n(dis,n,INT_MAX);
        dis[0]=0;
        while(pq.size()!=0){
            pair it=pq.top();
            pq.pop();
          
            if(vis[it.first])continue;
            vis[it.first]=true;
            for(int v : graph[it.first]){
                if(vis[v]==false && dis[v]>dis[it.first]+1){
                    dis[v]=dis[it.first]+1;
                    pq.push({v,dis[v]});
                }
            }
        }
      
        return dis[n-1];


    }
    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {
        int m=queries.size();
        vector<int> ans;
        vector<vector<int>> graph(n);
        for(int i=0;i<n-1;i++){
            graph[i].push_back(i+1);
            graph[i+1].push_back(i);
        }
        for(vector<int> it : queries){
            graph[it[0]].push_back(it[1]);   
            graph[it[1]].push_back(it[0]); 
            ans.push_back(solve(graph,n));
        }
        return ans;
    }
};
