class DisjointSet{
    int [] rank,par;
    DisjointSet(int n){
        rank=new int[n+1];
        par=new int[n+1];
        for(int i=0;i<n;i++){
            rank[i]=1;
            par[i]=i;
        }
    }
    int getPar(int el){
        if(par[el]==el)return el;
        return par[el]=getPar(par[el]);
    }
    void unionByRank(int u,int v){
        
        int up=getPar(u);
        int vp=getPar(v);
        if(rank[up]==rank[vp]){
            par[vp]=up;
            rank[up]++;
        }
        else if(rank[up]>rank[vp])par[vp]=up;
        else par[up]=vp;
    }
}



class Solution {
    PriorityQueue<int[]>pq=new PriorityQueue<>((a,b)->(a[1]-b[1]));
    int dis[]=new int[100000+1];
    void getMin(ArrayList<ArrayList<ArrayList<Integer>>>grid){

        
        while(pq.size()!=0){
            int u[]=pq.remove();
            for(ArrayList<Integer> v : grid.get(u[0])){
                int xor=(dis[u[0]] & v.get(1));
                if(dis[v.get(0)]>xor){
                    dis[v.get(0)]=xor;
                    pq.add(new int[]{v.get(0),xor});
                }
            }
        }
        
    }

    public int[] minimumCost(int n, int[][] edges, int[][] query) {
        DisjointSet ds=new DisjointSet(n);
        ArrayList<ArrayList<ArrayList<Integer>>> grid=new ArrayList<>();
        for(int i=0;i<n+1;i++){
            grid.add(new ArrayList<>());
        }
        for(int it[] : edges){
            grid.get(it[0]).add(new ArrayList<>(Arrays.asList(it[1],it[2])));
            grid.get(it[1]).add(new ArrayList<>(Arrays.asList(it[0],it[2])));
            ds.unionByRank(it[0],it[1]);
        }
        Arrays.fill(dis,Integer.MAX_VALUE);
        for(int i=0;i<n;i++){
            pq=new PriorityQueue<>((a,b)->(a[1]-b[1]));
            if(dis[i]!=Integer.MAX_VALUE)continue;
            for(ArrayList<Integer> v : grid.get(i)){
                dis[v.get(0)]=v.get(1);
                pq.add(new int[]{v.get(0),v.get(1)});
            }
            getMin(grid);
        }
       
        int ans[]=new int[query.length];int idx=0;
        for(int q[] : query){
            int u=q[0];
            int V=q[1];
            if(ds.getPar(u)!=ds.getPar(V))ans[idx++]=-1;
            else {
                ans[idx++]=dis[q[1]];
            }
            
        }
        return ans;
    }
}
