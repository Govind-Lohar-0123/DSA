using T=tuple<int,int,int>;
class Solution {
public:
    int dr[4]={1,-1,0,0};
    int dc[4]={0,0,-1,1};
    int dir[4]={3,4,2,1};
    int solve(int i,int j,vector<vector<int>>& grid){
        priority_queue<T,vector<T>,greater<>>pq;
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<bool>>vis(n,vector<bool>(m,0));
        vector<vector<int>>dis(n,vector<int>(m,n*m));
        dis[i][j]=0;
        pq.push({0,i,j});
        while(pq.size()!=0){
            auto [d,r,c]=pq.top();pq.pop();
            if(r==n-1 && c==m-1)return d;
            if(vis[r][c])continue;
            vis[r][c]=true;
            for(int i=0;i<4;i++){
                int nr=dr[i]+r;
                int nc=dc[i]+c;
                if(nr>=0 && nc>=0 && nr<n && nc<m){
                    int wt=d + ( (dir[i]!=grid[r][c]) ? 1 : 0 );
                    if(vis[nr][nc]==false && dis[nr][nc]>wt){
                        dis[nr][nc]=wt;
                        pq.push({wt,nr,nc});
                    }
                }
            }
        }
        return dis[n-1][m-1];
    }
    int minCost(vector<vector<int>>& grid) {
      return solve(0,0,grid);
    }
};
