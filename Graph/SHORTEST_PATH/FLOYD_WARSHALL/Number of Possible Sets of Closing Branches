class Solution {
    int maxDis=0;
    int isPossible(int dis[][],int n,int x){
        
       
        for(int k=0;k<n;k++){
            if(((1<<k) & x)==0)continue;
            for(int i=0;i<n;i++){
                if(((1<<i)& x)==0)continue;
                for(int j=0;j<n;j++){
                    if(((1<<j) & x )==0)continue;
                    dis[i][j]=Math.min(dis[i][j],dis[i][k]+dis[k][j]);
                }
            }
        }
        int currDis=0;
        for(int i=0;i<n;i++){
            if(((1<<i)&x)==0)continue;
            for(int j=0;j<n;j++){
                if(((1<<j)&x)==0)continue;
                currDis=Math.max(currDis,dis[i][j]);
            }   
        }

          
       
        
        return (currDis<=maxDis)?1:0;
        
    } 
    public int numberOfSets(int n, int maxDistance, int[][] roads) {
        int ans=0;
        maxDis=maxDistance;
          int graph[][]=new int[n][n];

       
        for(int i=0;i<Math.pow(2,n);i++){
          
            for(int j=0;j<n;j++){
                Arrays.fill(graph[j],1001);
                graph[j][j]=0;
            }
            for(int it[] : roads){
                int u=it[0];
                int v=it[1];
                int wt=it[2];
                if(((1<<u) & i)>=1 && ((1<<v) & i)>=1){
                    graph[u][v]=Math.min(graph[u][v],wt);
                    graph[v][u]=Math.min(graph[v][u],wt);
                    
                }
            }
            ans+=(isPossible(graph,n,i));
        }
        return ans;
    }
}