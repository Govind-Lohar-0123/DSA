

class Solution {
    
    public int maxProfitAssignment(int[] d, int[] p, int[] w) {
        int map[]=new int[100000+1];
        int n=p.length;
        int max=0;
        for(int i=0;i<n;i++){
            map[d[i]]=Math.max(p[i],map[d[i]]);
        }   
        for(int i=0;i<w.length;i++)max=Math.max(max,w[i]);

        for(int i=1;i<=max;i++){
            map[i]=Math.max(map[i-1],map[i]);
        } 

        int ans=0;
        for(int it : w){
            ans+=map[it];
        }
        return ans;
    }

}


// class Solution {
//     int getEqualOrLessThan(int it,Pair temp[]){
//         int l=0,r=temp.length-1;
//         while(l<=r){
//             int mid=(l+r)>>1;
//             if(temp[mid].first>it)r=mid-1;
//             else l=mid+1;
//         }
//         return r;
//     }
    
    
//     class Pair{
//         int first,sec;
//         Pair(int f,int s){
//             first=f;sec=s;
//         }
//     }
    
//     public int maxProfitAssignment(int[] d, int[] p, int[] w) {
//         int n=p.length;
//         Pair []temp=new Pair[n];
//         for(int i=0;i<n;i++){
//             temp[i]=new Pair(d[i],p[i]);
//         }
//         Arrays.sort(temp,(a,b)->((a.first==b.first)?b.first-a.first:a.first-b.first));
//         int pre[]=new int[n];
//         int ans=0;
//         pre[0]=temp[0].sec;
//         for(int i=1;i<n;i++){
//             pre[i]=Math.max(pre[i-1],temp[i].sec);
//         }
//         for(int it : w){
//             int idx=getEqualOrLessThan(it,temp);

//             ans+=(idx>=0)?pre[idx]:0;
//         }
//         return ans;
//     }
// }
