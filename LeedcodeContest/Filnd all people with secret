
// class DisjointSet{
//     int rank[],par[];
//     DisjointSet(int n){
//         rank=new int[n];
//         par=new int[n];
//         for(int i=0;i<n;i++){
//             par[i]=i;
//             rank[i]=1;
//         }
//     }

//     int getPar(int el){
//         if(par[el]==el)return el;
//         return par[el]=getPar(par[el]);
//     }
//     void unionByRank(int u,int v){
//         int up=getPar(u);
//         int vp=getPar(v);
//         if(rank[up]==rank[vp])
//         {
//             par[vp]=up;
//             rank[up]++;
//         }
//         else if(rank[up]>rank[vp])
//             par[vp]=up;
//         else par[up]=vp;
//     }
// }


class Solution {
    public List<Integer> findAllPeople(int n, int[][] g, int fp) {
       HashMap<Integer,ArrayList<ArrayList<Integer>>>map=new HashMap<>();
       for(int it[] : g){
           if(map.containsKey(it[2])==false)
             {  map.put(it[2],new ArrayList<>(Arrays.asList(new ArrayList<>(Arrays.asList(it[0],it[1])))));}
           else   map.get(it[2]).add(new ArrayList<>(Arrays.asList(it[0],it[1])));
        }

       ArrayList<Map.Entry<Integer,ArrayList<ArrayList<Integer>>>> list=new ArrayList<>(map.entrySet());
       Collections.sort(list,(a,b)->(a.getKey()-b.getKey()));
       boolean vis[]=new boolean[n+1];
       vis[0]=true;vis[fp]=true;
       
       for(Map.Entry<Integer,ArrayList<ArrayList<Integer>>> it : list){
           HashMap<Integer,ArrayList<Integer>>grid=new HashMap<>();
           Queue<Integer>q=new LinkedList<>();
           HashSet<Integer>set=new HashSet<>();

           for(ArrayList<Integer>arr : it.getValue()){
               if(grid.containsKey(arr.get(0))==false)
                    grid.put(arr.get(0),new ArrayList<>());
                if(grid.containsKey(arr.get(1))==false)
                    grid.put(arr.get(1),new ArrayList<>());
            
                grid.get(arr.get(0)).add(arr.get(1));
                grid.get(arr.get(1)).add(arr.get(0));
                if(vis[arr.get(0)] && set.contains(arr.get(0))==false)
                {    q.add(arr.get(0));set.add(arr.get(0));}
                if(vis[arr.get(1)] && set.contains(arr.get(1))==false)
                 {   q.add(arr.get(1));set.add(arr.get(1));}
           }

            
           while(q.size()!=0){
               int p=q.remove();
               for(int v : grid.get(p)){
                   if(vis[v]==false){
                       vis[v]=true;
                       q.add(v);
                   }
               }
           }
       }
       List<Integer>ans=new ArrayList<>();
       for(int i=0;i<n;i++){
           if(vis[i])ans.add(i);
       }
       return ans;
    }
}


// public List<Integer> findAllPeople(int n, int[][] grid, int fp) {
    //     DisjointSet ds=new DisjointSet(n);
    //     ds.unionByRank(0,fp);
    //     for(int )
    //     Arrays.sort();
    //     List<Integer>ans=new ArrayList<>();

    //     for(int it [] : grid){
    //         int u=it[0];
    //         int v=it[1];
    //         if(ds.getPar(u)==0 || ds.getPar(v)==0)
    //             ds.unionByRank(u,v);
    //     }

    //     for(int i=0;i<n;i++)
    //     {
    //         if(ds.getPar(i)==0)
    //             ans.add(i);
    //     }
    //     return ans;
    // }
