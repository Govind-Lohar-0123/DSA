class Solution {
public:
    int countPairLessThanDis(int dis,vector<int>&v){
        int n=v.size();
        int i=0,j=1;
        int cnt=0;
        while(j<n){
            
            while(i<j && (v[j]-v[i])>dis)i++;
            cnt+=(j-i);
            j++;
        }
        cout<<cnt<<","<<dis<<" ";
        return cnt;
    }
    int smallestDistancePair(vector<int>& nums, int k) {
        //steps 1]Sort 
        //2]Slidin window
        //3]Binary Search

        int n=nums.size();
        sort(begin(nums),end(nums));
        int len=(nums[n-1]-nums[0]);
        int l=0,r=len;
        int ans=0;
        while(l<=r){
            int mid=(l+r)>>1;
            int cnt_pair=countPairLessThanDis(mid,nums);
          
            if(cnt_pair>=k){
                ans=mid;
                r=mid-1;
            }
            else l=mid+1;

        }
        return l;

       
        //slidin windoe
        // int i=0,j=0;
        // while





        // int n=nums.size();
        // sort(begin(nums),end(nums));
        // int len=(nums[n-1]-nums[0])+1;
        // int map[len];
        // fill_n(map,len,0);
        // for(int i=0;i<n;i++){
        //     for(int j=i+1;j<n;j++){
        //         int diff=nums[j]-nums[i];
        //         map[diff]++;
        //     }
        // }
        // for(int i=1;i<len;i++)map[i]+=map[i-1];

        // auto idx=lower_bound(map,map+len,k);
        // int ind=(idx-map);
        // if(idx!=map+len)return ind;
        // else return -1;
        // // int idx=-1;
        // // while(k!=0){
        // //     idx++;
        // //     k-=map[idx];
        // //     k=max(k,0);
            
        // // }
        // // return idx;

    }
};
