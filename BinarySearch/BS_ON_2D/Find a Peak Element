class Solution {
    int[] findPeak(int r,int grid[][]){
        int n=grid.length;
        int m=grid[0].length;
        if((1>=m ||grid[r][1]<grid[r][0]) && (r-1<0 ||grid[r-1][0]<grid[r][0])
        && (r+1>=n ||grid[r+1][0]<grid[r][0]))return new int[]{r,0};
        
        if((m-2<0 ||grid[r][m-2]<grid[r][m-1]) && (r-1<0 ||grid[r-1][m-1]<grid[r][m-1])
        && (r+1>=n ||grid[r+1][m-1]<grid[r][m-1]))return new int[]{r,m-1};
        
        int l=1,ri=grid[0].length-2;
        while(l<=ri){
            int mid=(l+ri)>>1;
if((grid[r][mid] > grid[r][mid-1] && grid[r][mid] > grid[r][mid+1]) &&(r-1<0 ||grid[r-1][mid]<grid[r][mid])
        && (r+1>=n ||grid[r+1][mid]<grid[r][mid]))
                return new int[]{r,mid};
            else if((grid[r][mid] < grid[r][mid-1] && grid[r][mid] < grid[r][mid+1]) ){
                int prev=0,next=0;
                if((r-1<0 ||grid[r-1][mid-1]<grid[r][mid-1]))prev++; 
                if((r+1>=n ||grid[r+1][mid-1]<grid[r][mid-1]))prev++;
                if((r-1<0 ||grid[r-1][mid+1]<grid[r][mid+1]))next++; 
                if((r+1>=n ||grid[r+1][mid+1]<grid[r][mid+1]))next++;
                
                if(prev>next)ri=mid-1;
                else l=mid+1;
            }
            else if(grid[r][mid+1]>grid[r][mid])
                l=mid+1;
            else ri=mid-1;
        }
        return null;

    }
    public int[] findPeakGrid(int[][] mat) {
        int n=mat.length;
        int m=mat[0].length;
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                int peak[]=findPeak(i,mat);
                if(peak!=null)return peak;
            }
        }
        return new int[]{-1,-1};
    }
}
