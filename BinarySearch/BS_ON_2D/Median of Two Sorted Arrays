1]Binary search like 2d matrix median 
2]simple with space
3] without spce with counter
4]Binary search not like 2d matrix median







class Solution {

    double getMedian(int a[],int b[]){
        int n1=a.length;
        int n2=b.length;
        int left=(n1+n2+1)/2;
        int low=0; 
        int high=n1;
        while(low<=high){
            int mid1=(low+high)>>1;
            int mid2=(left-mid1);
            int l1=(mid1>0)?  a[mid1-1]:Integer.MIN_VALUE;
            int l2=(mid2>0)?  b[mid2-1]:Integer.MIN_VALUE;
            int r1=(mid1<n1)? a[mid1]:Integer.MAX_VALUE;
            int r2=(mid2<n2)? b[mid2]:Integer.MAX_VALUE;
            if(l1<=r2 && l2<=r1){
                int el1=Math.max(l1,l2);
                int el2=Math.min(r1,r2);
                if((n1+n2)%2==0)return (el1+el2)/(double)2;
                return el1;
            }
            else if(l2>r1)low=mid1+1;
            else high=mid1-1;
        }
        return 0.0;
    }

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1=nums1.length;
        int n2=nums2.length;
        if(n1>n2)return findMedianSortedArrays(nums2,nums1);
        return getMedian(nums1,nums2);
    }
}
class Solution {
    int getCountLessThanEqualToX(int arr1[],int x){
        
        int left=0,right=arr1.length-1;
        while(left<=right){
            int mid=(left+right)>>1;
            if(arr1[mid]>x)right=mid-1;
            else left=mid+1;
        }
        return left;
    }
    int getMedian(int arr1[],int arr2[],int median){
        int left=Math.min(arr1[0],arr2[0]);
        int right=Math.max(arr1[arr1.length-1],arr2[arr2.length-1]);
        
        while(left<=right){
            int mid=(left+right)>>1;
            int cnt1=getCountLessThanEqualToX(arr1,mid);
            int cnt2=getCountLessThanEqualToX(arr2,mid);
            
            if(cnt1+cnt2<median)left=mid+1;
            else {
                right=mid-1;
                
            }

        }
        return left;
    }
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1=nums1.length;
        int n2=nums2.length;
        if(n1==0 && n2==0)return 0;
        else if(n1==0){
            return (n2%2==0)?((nums2[n2/2-1]+nums2[n2/2])/(double)(2)):nums2[n2/2];
        }
        else if(n2==0){
            return (n1%2==0)?((nums1[n1/2-1]+nums1[n1/2])/(double)(2)):nums1[n1/2];
        }
        
        int n=nums1.length+nums2.length;
        if(n%2==0){
            int m1=getMedian(nums1,nums2,n/2);
            int m2=getMedian(nums1,nums2,n/2+1);
            System.out.print(m1+" "+m2);
            return (m1+m2)/(double)2;
        }
        return getMedian(nums1,nums2,n/2+1);
        
        
    }
}

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int el1=0,el2=0;
        int n1=nums1.length;
        int n2=nums2.length;
        int median=((n1+n2)%2==0)?(n1+n2)/2-1:(n1+n2)/2;
        int i=0,j=0;
        while(i<n1 || j<n2){
            int val1=(i<n1)?nums1[i]:1000000;
            int val2=(j<n2)?nums2[j]:1000000;
            if(val1<=val2)i++;
            else j++;
            if(median==0){
                el1=(val1<=val2)?val1:val2;
                
            }
            if(median==-1){
                el2=(val1<=val2)?val1:val2;
                break;
            } 

            median--;

            
            
        }
        return ((n1+n2)%2==0)?(el1+el2)/(double)2:el1;
    }
}
