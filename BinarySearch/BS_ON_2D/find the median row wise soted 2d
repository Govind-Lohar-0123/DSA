//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;


class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            String S[] = read.readLine().split(" ");
            int R = Integer.parseInt(S[0]);
            int C = Integer.parseInt(S[1]);
            int matrix[][] = new int[R][C];
            int c = 0;
            for(int i = 0; i < R; i++){
                String line[]=read.readLine().trim().split(" ");
                for(int j = 0; j < C; j++){
                    matrix[i][j] = Integer.parseInt(line[j]);
                }
            }
            Solution ob = new Solution();
            int ans = ob.median(matrix, R, C);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution {
    int cntLessThanEqualX(int x,int grid[][]){
        int ans=0;
        for(int i=0;i<grid.length;i++){
            int l=0,r=grid[0].length-1;
            while(l<=r){
                int mid=(l+r)>>1;
                if(grid[i][mid]<=x)l=mid+1;
                else r=mid-1;
            }
            ans+=l;
        }
        return ans;
    }
    int cntLessThanX(int x,int grid[][]){
        int ans=0;
        for(int i=0;i<grid.length;i++){
            int l=0,r=grid[0].length-1;
            while(l<=r){
                int mid=(l+r)>>1;
                if(grid[i][mid]<x)l=mid+1;
                else r=mid-1;
            }
            ans+=l;
        }
        return ans;
    }
    int median(int matrix[][], int R, int C) {
             int l=0,r=2000;
             int median=(R*C)/2;
             while(l<=r){
                 int mid=(l+r)>>1;
                    int cnt=cntLessThanEqualX(mid,matrix);
                    if(cnt<=median)l=mid+1;
                    else r=mid-1;
             }
             return l;
    }
}
