s=[l,e,v,e,l]

Approaches :-
1] take preff ans check from back as suffix;->similar string search 
    tc:-o(n^2);
    sp:-o(1);

2]simple generate all preff ans suffix the check one by one ;
    tc:-o(n^2)->preff + o(n^2)->suff + ((n(n+1)/2)*(n(n+1)/2)*len(s));
    tc:-((n(n+1)/2)*(n(n+1)/2)*len(s)) ->last tc
    sp:-((n(n+1)/2)*(n(n+1)/2)*len(s));

3]I can reduce (n(n+1)/2) tc by using hashmap;tc:-((n(n+1)/2)*len(s))

4]kmp algorithm same only grnerate lps return lps[n-1];
    tc-o(n);sc->o(n);


class Solution {

    void LPS(int lps[],int n,String s){
        int i=0,j=1;
        lps[0]=0;
        while(j<n){
            if(s.charAt(i)==s.charAt(j)){
                i++;
                lps[j]=i;
                j++;
            
            }
            else {
                if(i==0)lps[j++]=0;
                else i=lps[i-1];
            }
        }

    }

    public String longestPrefix(String s) {
        int lps[]=new int[s.length()];
        LPS(lps,s.length(),s);
        String ans="";
        for(int i=0;i<lps[lps.length-1];i++)
            ans+=s.charAt(i);
        return ans;
    }
}
