class Solution {
public:
    int dp[101][1025];
    unordered_map<int,vector<int>>map;
    int solve(int idx,int mask,vector<vector<int>>& grid){
        if(idx==0)return 0;
        if(dp[idx][mask]!=-1)return dp[idx][mask];
        int ans=solve(idx-1,mask,grid);
        for(int &i : map[idx]){
            if((mask & (1<<i))!=0)continue;
            ans=max(ans,idx+solve(idx-1,(mask |(1<<i)),grid));
        }

        return dp[idx][mask]=ans;
    }
    int maxScore(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        memset(dp,-1,sizeof(dp));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                map[grid[i][j]].push_back(i);
            }
        }
        return solve(100,0,grid);
    }
};
