1]LCA with 
2]LCA withour with path
3]BFS using HASHMA BY MAKING GRAPH



class Solution {
    class Pair{
        int dis;
        TreeNode node;
        Pair(TreeNode t,int dis){
            this.dis=dis;
            node=t;
        }
    }
    HashMap<TreeNode,TreeNode>map=new HashMap<>();
    int ans=0;
    void addParent(TreeNode root){
        if(root==null)return;
        addParent(root.left);
        addParent(root.right);
        if(root.left!=null)map.put(root.left,root);
        if(root.right!=null)map.put(root.right,root);
    }
    void solve(TreeNode root,int dis){
        if(root==null)return ;
        if(root.left==null && root.right==null)
            ans+=getGoodLeafNodes(root,dis);
        solve(root.left, dis);
        solve(root.right,dis);
    }
    int getGoodLeafNodes(TreeNode node,int d){
        if(node==null)return 0;
        int cnt=0;
        HashMap<TreeNode,Integer> vis=new HashMap<>();
        
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(node,0));
        int lvl=0;
        while(q.size()!=0 && lvl<=d){
           
            int size=q.size();

            while(size--!=0){

                    Pair it=q.remove();
                    TreeNode root=it.node;
                    int dis=it.dis;
                if(root!=node && root.left==null && root.right==null && map.containsKey(root) && dis<=d){
                    cnt++;
                    // System.out.print(root.val+" "+node.val);
                }
                //parent node push
                if(map.containsKey(root) && vis.containsKey(map.get(root))==false && dis+1<=d){
                    q.add(new Pair(map.get(root),dis+1));
                    vis.put(map.get(root),0);
                }
                if(root.left!=null && vis.containsKey(root.left)==false && dis+1<=d){
                    q.add(new Pair(root.left,dis+1));
                    vis.put(root.left,0);
                }
                if(root.right!=null && vis.containsKey(root.right)==false && dis+1<=d){
                    q.add(new Pair(root.right,dis+1));
                    vis.put(root.right,0);
                }
            }
            lvl++;
        }
        map.remove(node);
        return cnt;
        
    }
    public int countPairs(TreeNode root, int distance) {
        addParent(root);
        ans=0;
        solve(root,distance);
        return ans;
    }
}
class Solution {
    boolean findPath(TreeNode root,ArrayList<TreeNode>temp,TreeNode x){
        if(root==null)return false;
        temp.add(root);
        if(root==x)return true;
        boolean left=findPath(root.left,temp,x);
        if(left)return true;
        boolean right=findPath(root.right,temp,x);
        if(right)return true;
        
        temp.remove(temp.size()-1);
        return false;

    }
    ArrayList<TreeNode> addAllLeafNode(TreeNode root,ArrayList<TreeNode>leafNodes){
        if(root==null)return leafNodes;
        addAllLeafNode(root.left,leafNodes);
        addAllLeafNode(root.right,leafNodes);
        if(root.left==null && root.right==null)leafNodes.add(root);
        return leafNodes;
    }
    int getGoodNodes(ArrayList<TreeNode> path1,ArrayList<TreeNode> path2){
        int i=0;
        int n=path1.size();
        int m=path2.size();
      
        while(i<n && i<m && path1.get(i)==path2.get(i))i++;

        return (n-i)+(m-i);
            
        
    }
    public int countPairs(TreeNode root, int distance) {
        ArrayList<TreeNode> leafNodes=addAllLeafNode(root,new ArrayList<>());
        int ans=0;
        int n=leafNodes.size();
        for(int i=0;i<n;i++){
              ArrayList<TreeNode> path1=new ArrayList<>();
             findPath(root,path1,leafNodes.get(i));
            for(int j=i+1;j<n;j++){
              
                ArrayList<TreeNode> path2=new ArrayList<>();
                findPath(root,path2,leafNodes.get(j));
                int temp=getGoodNodes(path1,path2);
                if(temp<=distance)ans++;
            }
        }
        return ans;

    }
}
