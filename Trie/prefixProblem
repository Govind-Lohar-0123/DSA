

class Trie {
    static class Node {
        char node;
        boolean eow;
        Node[] child = new Node[26];

        Node(char node) {
            this.node = node;
        }

        Node() {
            
        }
    }
  static Node root=null;
  Trie(){
      root=new Node();
  }
   

    static void insert(String word, int n) {
        Node curr = root;
        for (int i = 0; i < n; i++) {
            char ch = word.charAt(i);
            if (curr.child[ch - 'a'] == null)
                curr.child[ch - 'a'] = new Node(ch);
            curr = curr.child[ch - 'a'];
        }
        curr.eow = true;
    }

    static boolean search(String key) {
        Node curr = root;
        // System.out.println(key);
        for (int i = 0; i < key.length(); i++) {
            char ch = key.charAt(i);
            if (curr.child[ch - 'a'] == null)
                return false;
            curr = curr.child[ch - 'a'];
        }
        if (curr.eow == false)
            return false;
        return true;
    }

    static boolean hasChild(Node root, Node node) {
        for (Node it : root.child)
            if (it != node && it != null)
                return true;
        return false;
    }

    static String shortestPrefix(String key) {
        Node curr =root;
        int j =0;
        for (int i =0; i < key.length(); i++) {
            char ch = key.charAt(i);
            if (i!=0 && hasChild(curr, curr.child[key.charAt(i) - 'a'])) 
                j=i;
            curr = curr.child[ch - 'a'];
        }
        return key.substring(0, j + 1);
    }

   
}

class Solution {
    static String[] findPrefixes(String[] arr, int n) {
        
        Trie t=new Trie();int k=0;
        for(String it : arr)
            t.insert(it,it.length());
        String []ans=new String[n];
        for(String it : arr)
            ans[k++]=t.shortestPrefix(it);
        return ans;
        
    }
    
};
