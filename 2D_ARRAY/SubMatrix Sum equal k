
                                prefix sum Approach

class Solution {

     public int numSubmatrixSumTarget(int[][] arr, int target) {
       int n=arr.length;
       int m=arr[0].length;
       int ans=0;
       for(int k=0;k<m;k++){
             int []temp=new int[n];
           for(int j=k;j<m;j++){
               int sum=0;
               HashMap<Integer,Integer>map=new HashMap<>();
             
               map.put(0,1);
               for(int i=0;i<n;i++){
                   temp[i]= arr[i][j] + ((j>0)?temp[i]:0);
                   sum+=temp[i];
                   if(map.containsKey(sum-target))
                    ans+=map.get(sum-target);
                map.put(sum,map.getOrDefault(sum,0)+1);
               }
           }
       }
       return ans;
    }
}








class Solution {

    int matrixSum(int mat[][],int x1,int x2,int y1,int y2){
        int sum=0;
        for(int i=x1;i<=x2;i++){
            for(int j=y1;j<=y2;j++){
                sum+=mat[i][j];
            }
        }
        return sum;
    }


    public int numSubmatrixSumTarget(int[][] matrix, int target) {
        int cnt=0;
        int n=matrix.length;
        int m=matrix[0].length;
        for(int x1=0;x1<n;x1++){
            for(int y1=0;y1<m;y1++){
                for(int x2=x1;x2<n;x2++){
                    for(int y2=y1;y2<m;y2++){
                        if(matrixSum(matrix,x1,x2,y1,y2)==target)cnt++;
                    }
                }
            }
        }
        return cnt;
    }
}
