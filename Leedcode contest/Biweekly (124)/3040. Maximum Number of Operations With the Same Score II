

          Approach 1
          
class Solution {
    HashMap<String,Integer>map=new HashMap<>();
    int solve(int i,int j,int d,int nums[]){
        
        // if(j-i+1==2)return (nums[i]+nums[j]==d)?1:0;
        // if(j-i+1<=1)return 0;
        // int op1=0,op2=0,op3=0;
        // String s=i+"#"+j+"#"+d;
        // if(map.containsKey(s))return map.get(s);
        // if(d==0 || d==nums[i]+nums[i+1])
        //     op1=solve(i+2,j,nums[i]+nums[i+1],nums)+1;
        // if(d==0 || d==nums[j]+nums[j-1])
        //     op2=solve(i,j-2,nums[j]+nums[j-1],nums)+1;
        // if(d==0 || d==nums[i]+nums[j])
        //     op3=solve(i+1,j-1,nums[i]+nums[j],nums)+1;
        // int ans=Math.max(op1,Math.max(op2,op3));
        // map.put(s,ans);
        // return ans;
    }
    
    public int maxOperations(int[] nums) {
        if(nums.length==2)return 1;
        map=new HashMap<>();
        
       return solve(0,nums.length-1,0,nums);
    }
}
