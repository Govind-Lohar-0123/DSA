class Solution {
     HashMap<String,Integer> mp =new HashMap<>();
    int dp[]=new int[1000+1];
    int solve(String s,int i,int []map){
        if(i>=s.length()){
            int k=0;
            for(;k<26;k++){
                if(map[k]!=0)return s.length();
            }  
            return 0;
            
        }
        String temp=i+"$"+Arrays.toString(map);
        int ans=s.length();
       if(mp.containsKey(temp))return mp.get(temp);
      
        map[s.charAt(i)-'a']++;

        int max=map[s.charAt(i)-'a'];
        int k=0; 
        int cnt=0;
        boolean flag=true;   
        for(;k<26;k++){
            if(max!=map[k] && map[k]!=0)flag=false;
            if(map[k]>0)cnt++;
        }  
        if(cnt==1 || flag)ans=solve(s,i+1,new int[26])+1;
        ans=Math.min(ans,solve(s,i+1,map));  
        
        mp.put(temp,ans);
        return ans;
    }
    public int minimumSubstringsInPartition(String s) {
        Arrays.fill(dp,-1);
        return solve(s,0,new int[26]);
    }
}    it is not working





















class Solution {
    int dp[]=new int[1000+1];
    int solve(String s,int i,int []map){
        if(i>=s.length())return 0;
        int ans=s.length();
       if(dp[i]!=-1)return dp[i];
      
        for(int j=i;j<s.length();j++){
            map[s.charAt(j)-'a']++;
            
            int max=map[s.charAt(j)-'a'];
            int k=0;
            for(;k<26;k++){
                if(max!=map[k] && map[k]!=0)break;
            }
            if(j==i || (k==26))
             ans=Math.min(ans,solve(s,j+1,new int[26])+1);
        }
        return dp[i]=ans;
    }
    public int minimumSubstringsInPartition(String s) {
        Arrays.fill(dp,-1);
        return solve(s,0,new int[26]);
    }
}
