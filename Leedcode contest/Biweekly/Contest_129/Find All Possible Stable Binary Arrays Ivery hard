class Solution {
    int mod=1000000007;
    long dp[][][]=new long[200+1][200+1][3];
    long solve(long one,long zero,long cons,long limit){
        if(one==0 && zero==0)return 1;
        long ans=0;
        if(dp[(int)one][(int)zero][(int)cons]!=-1)return dp[(int)one][(int)zero][(int)cons];

        if(cons!=0){
            for(int i=1;i<=Math.min(zero,limit);i++){
                ans+=solve(one,zero-i,0,limit);
            }
        }
        if(cons!=1){
             for(int i=1;i<=Math.min(one,limit);i++){
                ans+=solve(one-i,zero,1,limit);
            }
        }
        // if(one>0){
        //     if(cons==1 && cnt<limit)
        //        ans=solve(one-1,zero,1,cnt+1,limit)%mod;
        //     else if(cons==0 || cons==2)
        //         ans+=solve(one-1,zero,1,1,limit)%mod;
        // }
        // if(zero>0){
        //     if(cons==0 && cnt<limit)
        //         ans+=solve(one,zero-1,0,cnt+1,limit)%mod;
        //     else if(cons==1 || cons==2)
        //         ans+=solve(one,zero-1,0,1,limit)%mod;
        // }
        return dp[(int)one][(int)zero][(int)cons]=ans%mod;
    }
    public int numberOfStableArrays(int zero, int one, int limit) {
        for(int i=0;i<201;i++){
            for(int j=0;j<201;j++){
                for(int k=0;k<3;k++){
                    // for(int l=0;l<201;l++){
                        dp[i][j][k]=-1;
                    // }
                }
            }
        }
         return (int)solve(one,zero,2,limit);
    }
}
