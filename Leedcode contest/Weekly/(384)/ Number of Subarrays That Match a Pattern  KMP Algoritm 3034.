appraches:-

1]kmp algorithm how
we connsider -1 0 1  as (a ,b, c)
[1,2,3,4,5,6] patter[1,1] as [aa]
find difference
[  1  2  3  4  5  6  ]
     1  1  1  1  1
      a  a  a  a  a
use kmp alithm for arra with patter
s=[a a a a a]   patter[a a]  find op->4


class Solution {
    
    
     int LPS[]=null;
     void fillLPS(int b[],int m){
        LPS =new int[m];
        int k=1;
        int suff=1;
        int preff=0;
        while(suff<m){
            if(b[suff]==b[preff]){
                LPS[k++]=preff+1;
                suff++;preff++;
            }
            else {
                if(preff==0){LPS[k++]=0;suff++;}
                else preff=LPS[preff-1];
                
            }
        }
    }
     int isMatch(int [] a,int n,int []b){
        
        int m=b.length;int ans=0;
        int suff=0;
        int preff=0;
        while(suff<n){
            if(a[suff]==b[preff]){
               suff++;preff++;
            }
            if(preff==m){
                ans++;
                preff=LPS[preff-1];
            }
            else if(suff<n && a[suff]!=b[preff]){
                if(preff==0){suff++;}
                else preff=LPS[preff-1];
                
            }
        }
       return ans;
    }
    
    public int countMatchingSubarrays(int[] nums, int[] pattern) {
        LPS=new int[pattern.length+1];
        
       int[]s=new int[nums.length];int n=0;int idx=0;
        for(int i=0;i<nums.length-1;i++){
            if(nums[i]==nums[i+1])s[idx++]=0;
            else if(nums[i]>nums[i+1])s[idx++]=-1;
            else s[idx++]=1;
            n++;
        }
        //problem by running this looop
        
        //  for(int i=0;i<pattern.length;i++){
        //     if(pattern[i]==0)pat+="b";
        //     else if(pattern[i]==1)pat+="c";
        //     else pat+="a";
        // }
        
     fillLPS(pattern,pattern.length);
     return isMatch(s,n,pattern);
        
        
        
        
    }
}
