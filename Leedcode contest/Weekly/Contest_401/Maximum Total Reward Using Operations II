import java.math.BigInteger;
class Solution {
    public static BitSet toBitSet(BigInteger val) {
  if(val.signum() < 0)
  throw new IllegalArgumentException("Negative value: " + val);
  return BitSet.valueOf(reverse(val.toByteArray()));
}
static byte[] reverse(byte[] bytes) {
  for(int i = 0; i < bytes.length/2; i++) {
    byte temp = bytes[i];
    bytes[i] = bytes[bytes.length-i-1];
    bytes[bytes.length-i-1] = temp;
  }
  return bytes;
}
public static BigInteger toBigInteger(BitSet val) {
  return new BigInteger(1, reverse(val.toByteArray()));
}
public static BitSet shiftLeft(BitSet bits, int n) {
  BigInteger temp= toBigInteger(bits);
  temp= temp.shiftLeft(n);
  return toBitSet(temp);
}
    public int maxTotalReward(int[] rv) {
        BitSet dp=new BitSet(100100);
        BitSet mask=new BitSet(100100);
        Arrays.sort(rv);
        int p=0;
       
        dp.set(0);
        for(int it : rv){
            while(it>p)
             {mask.set(p++);}
             System.out.println("mask"+ dp);
             System.out.println("before dp"+ dp);
            BitSet valid_bit=(BitSet)dp.clone(); 

            
            valid_bit.and(mask);
            System.out.println("valid_bit"+ valid_bit);
            dp.or(shiftLeft(valid_bit,it));
             System.out.println("after dp"+ dp);
           
           
        }

        int ans=dp.size()-1;
        while(dp.get(ans)==false)ans--;
        return ans;
    }
}
