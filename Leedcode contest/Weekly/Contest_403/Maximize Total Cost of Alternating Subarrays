class Solution {
    long [][]dp=null;
    long solve(int i,int k,int arr[]){
        // if(i==arr.length)return 0;
        // long ans=0;
        // if(dp[i][k]!=-1)return dp[i][k];
        // if(k%2==0){
        //     ans=arr[i]+Math.max(solve(i+1,0,arr),solve(i+1,1,arr));
        // }
        // else ans=-1*arr[i]+solve(i+1,0,arr);
        // return dp[i][k]=ans;

        // for( i=arr.length-1;i>=0;i--){
        //     for( k=0;k<2;k++){
        //          long ans=0;
            
        //         if(k%2==0){
        //             ans=arr[i]+Math.max(dp[i+1][0],dp[i+1][1]);
        //         }
        //         else ans=-1*arr[i]+dp[i+1][0];
        //         dp[i][k]=ans;
        //     }
        // }
        // long zero=0;
        // long one=0;
        // for( i=arr.length-1;i>=0;i--){
        //     long curr=zero;
        //     curr=arr[i]+Math.max(zero,one);
        //     one=-1*arr[i]+zero;
        //     zero=curr;
           
        // }
        // return zero;
    }
    
    public long maximumTotalCost(int[] nums) {
        dp=new long[nums.length+1][2];
       for(int i=0;i<nums.length;i++){
        dp[i][0]=-1;
        dp[i][1]=-1;
       }
        return solve(0,0,nums);
    }
}
