class Solution {
    public int maxOperations(int[] nums) {
        int op=1;
        int sameDiff=nums[0]+nums[1];
        for(int i=2;i<nums.length-1;i+=2){
            int diff=nums[i]+nums[i+1];
            if(diff!=sameDiff)return op;
            op++;
        }
        return op;
    }
}



///////////////  second ////////////////////
choice]



class Solution {
    int dp[][]=null;
    int solve(int i,int j,int d,int nums[]){
        if(i>=j)return 0;
        int op1=0,op2=0,op3=0;
       
        if(dp[i][j]!=-1)return dp[i][j];
        if( d==nums[i]+nums[i+1])
            op1=solve(i+2,j,nums[i]+nums[i+1],nums)+1;
        if( d==nums[j]+nums[j-1])
            op2=solve(i,j-2,nums[j]+nums[j-1],nums)+1;
        if(d==nums[i]+nums[j])
            op3=solve(i+1,j-1,nums[i]+nums[j],nums)+1;
        
        return dp[i][j]=Math.max(op1,Math.max(op2,op3));
       
    }
    
    public int maxOperations(int[] nums) {
      
        fillDp(nums);
        int ans=solve(0,nums.length-1,nums[0]+nums[1],nums);
        fillDp(nums);
        ans=Math.max(ans,solve(0,nums.length-1,nums[0]+nums[nums.length-1],nums));
        fillDp(nums);
        ans=Math.max(ans,solve(0,nums.length-1,nums[nums.length-2]+nums[nums.length-1],nums));
        return ans;
        
        
    }
    void fillDp(int nums[]){
       dp=new int[nums.length][nums.length];
        for(int i=0;i<nums.length;i++){
            for(int j=0;j<nums.length;j++){dp[i][j]=-1;}
        }
    }
}
