class Trie{
    class Node{
        boolean eow;
       
        Node child[]=new Node[26];
    }
    
    Node root=new Node();
   
    void insert(String word){
        Node curr=root;
        for(int i=0;i<word.length();i++){
            int ch=word.charAt(i)-'0';
            if(curr.child[ch]==null)
                curr.child[ch]=new Node();
            curr=curr.child[ch];
           
        }
        curr.eow=true;
    }
    
    int longestPrefix(String word){
        Node curr=root;
        int len=0;
        for(int i=0;i<word.length();i++){
            int ch=word.charAt(i)-'0';
            if(curr.child[ch]==null)
                return len;
            curr=curr.child[ch];
           len++;
        }
       return len;
    }
    
    
  
     
}


class Solution {
    public int longestCommonPrefix(int[] arr1, int[] arr2) {
        Trie tr=new Trie();
        
        for(int it : arr2){
            tr.insert(Integer.toString(it));
        }
        int max=0;
        for(int it : arr1){
            max=Math.max(max,tr.longestPrefix(Integer.toString(it)));
        }
        return max;
            
        
        
    }
}
