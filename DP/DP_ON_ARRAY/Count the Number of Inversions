class Solution {
    int dp[][]=null;
    int mod=(1000000007);
    HashMap<Integer,Integer> map=new HashMap<>();
    int m;
    // 0 to n-1
    int solve(int n,int cnt,int max,int lastIndex){
       
        // if(cnt>max )return 0;
        // if(map.containsKey(n-1) && map.get(n-1)!=cnt)return 0;
        // if(map.containsKey(n) && map.get(n)!=cnt)return 0;
        // if(n==lastIndex+1)return 1;
        
        // if(dp[n][cnt]!=-1)return dp[n][cnt];
        // int ans=0;
        // for(int i=0;i<=n+1;i++){
        //     int temp=cnt+(i);
        //      ans=(ans+solve(n+1,temp,max,lastIndex))%mod;
        // }
        // return dp[n][cnt]=ans%mod;

        int next[]=new int[max+1];
        // for(int i=lastIndex+1;i>=0;i--){
        //      int curr[]=new int[max+1];
        //     for(int j=0;j<=max;j++){
                
        //         if(map.containsKey(i) && map.get(i)!=j)curr[j]= 0;
        //         else if(i==lastIndex+1)curr[j]=1;
        //         else{
        //             int ans=0;
        //             for(int k=0;k<=i+1;k++){
        //                 int temp=(j+(k));
        //                 ans=(((temp>max)?0  : next[temp]) + ans )%mod;
        //             }
        //             curr[j]=ans%mod;
        //         }
                
        //     }
        //     next=curr;
        // }
        // return next[0];
        // for(int i=lastIndex+1;i>=0;i--){
        //     for(int j=0;j<=max;j++){
                
        //         if(map.containsKey(i) && map.get(i)!=j)dp[i][j]= 0;
        //         else if(i==lastIndex+1)dp[i][j]=1;
        //         else{
        //             int ans=0;
        //             for(int k=0;k<=i+1;k++){
        //                 int temp=(j+(k));
        //                 ans=(((temp>max)?0  : dp[i+1][temp]) + ans )%mod;
        //             }
        //             dp[i][j]=ans%mod;
        //         }
                
        //     }
        // }
        // return dp[0][0];
    }
    public int numberOfPermutations(int n, int[][] requirements) {
        int max=0;
        for(int it[] : requirements){
            // if(it[0]==0 && it[1]>=1)return 0;
            map.put(it[0],it[1]);
            max=Math.max(it[1],max);
        }
        m=n;
        dp=new int[n+1][max+1];
        // for(int it[] : dp)Arrays.fill(it,-1);
        
        // return solve(0,0,max,n-1);
        return solve(0,0,max,n-1);
    }
}
