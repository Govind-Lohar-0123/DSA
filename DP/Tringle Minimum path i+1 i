import java.util.* ;
import java.io.*; 
public class Solution {
    static long dp[][]=null;
    public static int minimumPathSum(int[][] triangle, int n) {
        dp=new long[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<=i;j++){
                dp[i][j]=-1;
            }
        }
        return (int)pathSum(triangle, 0, 0);
    }

    static long pathSum(int arr[][],int i,int j){
        // Memoazation Approach

        // if(i==arr.length-1)return arr[i][j];
        // if(dp[i][j]!=-1)return dp[i][j];
        // return dp[i][j]=Math.min(pathSum(arr,i+1,j+1),pathSum(arr,i+1,j))+arr[i][j];

        // Tabulation Appproach
        
        // int n=arr.length;
        // for(j=0;j<n;j++)dp[n-1][j]=arr[n-1][j];
        // for(i=n-2;i>=0;i--){
        //     for(j=0;j<=i;j++){
        //        dp[i][j]=Math.min(dp[i+1][j+1],dp[i+1][j])+arr[i][j];
        //     }
        // }
        // return dp[0][0];

        // Space Optimization
        // int n=arr.length;
        // int prev[]=new int[n];

        // for(j=0;j<n;j++)prev[j]=arr[n-1][j];
        // for(i=n-2;i>=0;i--){
        //     int curr[]=new int[n];
        //     for(j=0;j<=i;j++){
        //        curr[j]=Math.min(prev[j+1],prev[j])+arr[i][j];
        //     }
        //     prev=curr;
        // }
        // // return dp[0][0];
        // return prev[0];

        
    }
}
