class Solution {
    int dp[]=null;
    int solve(int nums[],int n){
        // if(n<0)return 0;
        // if(dp[n]!=-1)return dp[n];
        // if(n==0)return nums[0];
        // return dp[n]=Math.max(nums[n]+solve(nums,n-2),solve(nums,n-1));

        // tablulation
        // dp[0]=nums[0];
        // for(int i=1;i<n+1;i++){
        //     dp[i]=Math.max(((i-2>=0)?dp[i-2]:0)+ nums[i],dp[i-1]);
        // }
        // return dp[n];

        // space optimization

        // int prev1=nums[0];
        // int prev2=0;
        // for(int i=1;i<n+1;i++){
        //     int curr=Math.max(((i-2>=0)?prev2:0)+ nums[i],prev1);
        //     prev2=prev1;
        //     prev1=curr;
        // }
        // return prev1;
    }
    public int rob(int[] nums) {
        dp=new int[nums.length];
        Arrays.fill(dp,0);
        return solve(nums,nums.length-1);
    }
}
