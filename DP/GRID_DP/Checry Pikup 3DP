import java.util.* ;
import java.io.*; 
public class Solution {
	
	static int dp[][][]=null;
	public static int maximumChocolates(int r, int c, int[][] grid) {
		
		int n=grid.length;
		int m=grid[0].length;
		dp=new int[n][m][m];
		for(int i=0;i<n;i++){
			for(int j=0;j<m;j++){
				for(int k=0;k<m;k++){
					dp[i][j][k]=0;
				}
			}
		}
	 	return maxi(0,0,m-1,grid,n,m);
		
	}

	static int maxi(int i,int j1,int j2,int grid[][],int n,int m){
		// if(j1<0 || j2<0 || j1>=m || j2>=m)return -10000;
		// if(dp[i][j1][j2]!=-1)return dp[i][j1][j2];
		// if(i==n-1){
		// 	if(j1==j2)return grid[i][j2];
		// 	else return (grid[i][j1]+grid[i][j2]);
		// }
		// int max=Integer.MIN_VALUE;
		// for(int d1=-1;d1<2;d1++){
		// 	for(int d2=-1;d2<2;d2++){
		// 		if(j1==j2)max=Math.max(max,grid[i][j1]+maxi(i+1,j1+d1,j2+d2,grid,n,m));
		// 		else max=Math.max(max,grid[i][j1]+grid[i][j2]+maxi(i+1,j1+d1,j2+d2,grid,n,m));

		// 	}
		// }
		// return dp[i][j1][j2]=max;

		// tablulation 
	
	// 	for(j1=0;j1<m;j1++){
	// 		for(j2=0;j2<m;j2++){
	// 			if(j1==j2)dp[n-1][j1][j2]=grid[n-1][j2];
	// 			else dp[n-1][j1][j2]=(grid[n-1][j1]+grid[n-1][j2]);
	// 		}
	// 	}

	// 	for( i=n-2;i>=0;i--){
	// 		for( j1=0;j1<m;j1++){
	// 			for( j2=0;j2<m;j2++){
	// 				int max=Integer.MIN_VALUE;
	// 				for(int d1=-1;d1<2;d1++){
	// 					for(int d2=-1;d2<2;d2++){
	// 						int alice=0;
	// 						if(j1==j2)alice+=grid[i][j1];
	// 						else alice=grid[i][j1]+grid[i][j2];
	// 						if(j1+d1>=0 && j1+d1<m && j2+d2>=0 && j2+d2<m)
	// 							alice+=dp[i+1][j1+d1][j2+d2];
	// 						else alice+=-100000;
	// 						max=Math.max(max,alice);	
							
	// 					}
	// 				}
	// 				dp[i][j1][j2]=max;
	// 	 		}
	// 		}
	// 	}
	// return dp[0][0][m-1];

	// space optimization
		int dp[][]=new int[m][m];
	    for(j1=0;j1<m;j1++){
			for(j2=0;j2<m;j2++){
				if(j1==j2)dp[j1][j2]=grid[n-1][j2];
				else dp[j1][j2]=(grid[n-1][j1]+grid[n-1][j2]);
			}
		}

		for( i=n-2;i>=0;i--){
			int curr[][]=new int[m][m];
			for( j1=0;j1<m;j1++){
				for( j2=0;j2<m;j2++){
					int max=Integer.MIN_VALUE;
						for(int d1=-1;d1<2;d1++){
						for(int d2=-1;d2<2;d2++){
							int alice=0;
							if(j1==j2)alice+=grid[i][j1];
							else alice=grid[i][j1]+grid[i][j2];
							if(j1+d1>=0 && j1+d1<m && j2+d2>=0 && j2+d2<m)
								alice+=dp[j1+d1][j2+d2];
							else alice+=-100000;
							max=Math.max(max,alice);	
							




							
						}
					}
					curr[j1][j2]=max;
		 		}
			}
			dp=curr;
		}
	return dp[0][m-1];




	}
}
