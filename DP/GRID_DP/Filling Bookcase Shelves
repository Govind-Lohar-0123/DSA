class Solution {
public:
    int dp[1001][1001];
    int solve(int idx,int w,int h,int sw,vector<vector<int>>& books){
        // if(idx>=books.size())return h;
        // if(dp[idx][w]!=-1)return dp[idx][w];
        // int ans=INT_MAX;
        // int remHeight=max(0,books[idx][1]-h);
        // int remWidth=w-books[idx][0];
        // if(remWidth>=0)
        //     ans=solve(idx+1,remWidth,max(h,books[idx][1]),sw,books);
        // return dp[idx][w]=min(ans,h+solve(idx+1,sw-books[idx][0],books[idx][1],sw,books));

        int n=books.size();
        for(int i=n;i>=0;i--){
            h=0;
            for(int j=w;j>=0;j--){
                if(i>=n) dp[i][j]=h;
                else {
                    int ans=INT_MAX;
                    int remWidth=j-books[i][0];
                    if(remWidth>=0)
                    {    ans=dp[i+1][remWidth];
                          h=max(h,books[i][1]);
                    }
                    dp[i][j]=min(ans,h+dp[i+1][sw-books[i][0]]);
                    h=books[i][1];
                }
            }
        }
        return dp[0][w];

    }
    int minHeightShelves(vector<vector<int>>& books, int sw) {
        memset(dp,0,sizeof(dp));
        return solve(0,sw,0,sw,books);
    }
};
