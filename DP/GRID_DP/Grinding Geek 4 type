class Solution {
    // int dp[][]=null;
    public int max_courses(int n, int total, int[] cost) {
        //  dp=new int[n][total+1];
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<total+1;j++)
        //     {dp[i][j]=-1;}
        // }
        int i=0;int j=n-1;
        while(i<j){
            int t=cost[i];
            cost[i]=cost[j];
            cost[j]=t;i++;j--;
        }
        return countCrs(n-1,total,cost);
    }
    
    int countCrs(int n,int total,int cost[]){
        // recusive*****
        // if(n==0){
        //     if(cost[0]<=total)return 1;
        //     return 0;
        // }
        // if(dp[n][total]!=-1)return dp[n][total];
        // if(total>=cost[n]){
           
        //     return dp[n][total]=Math.max(countCrs(n-1,total-cost[n]+(9*cost[n])/10,cost)+1,countCrs(n-1,total,cost));
        // }
        // return dp[n][total]=countCrs(n-1,total,cost);

        // tabulation*****

        // for(int i=0;i<=n;i++){
        //     for(int ttl=0;ttl<=total;ttl++){
        //         if(i==0){
        //             if(cost[0]<=ttl)dp[i][ttl]= 1;
        //         }
        //         else{
        //             if(ttl>=cost[i]){
        //                 dp[i][ttl]=Math.max(dp[i-1][(ttl-cost[i])+((9*cost[i])/10)]+1,dp[i-1][ttl]);
        //             }
        //             else dp[i][ttl]=dp[i-1][ttl];
        //         }
               
        //     }
        // }
        
        // return dp[n][total];
        
        // space optimization
        
        int prevRow[]=new int[total+1];
       
        for(int i=0;i<=n;i++){
            int curr[]=new int[total+1];
            for(int ttl=0;ttl<=total;ttl++){
                if(i==0){
                    if(cost[0]<=ttl)curr[ttl]= 1;
                }
                else{
                    if(ttl>=cost[i]){
                       curr[ttl]=Math.max(prevRow[(ttl-cost[i])+((9*cost[i])/10)]+1,prevRow[ttl]);
                    }
                    else curr[ttl]=prevRow[ttl];
                }
               
            }
            prevRow=curr;
        }
        
        return prevRow[total];
        
    }
}
