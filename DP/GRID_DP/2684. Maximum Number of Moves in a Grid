class Solution {
public:
    int n,m;
    int dp[1000+1][1000+1];
    // int solve(int i,int j,vector<vector<int>>& grid){
    //     int ans=0;
    //     if(dp[i][j]!=-1)return dp[i][j];
    //     //(row col+1)
    //     if(j+1<m && grid[i][j]<grid[i][j+1])
    //         ans=solve(i,j+1,grid)+1;
    //     //(row-1 ,col+1)
    //     if(i>=1 && j+1<m &&  grid[i][j]<grid[i-1][j+1])
    //         ans=max(ans,solve(i-1,j+1,grid)+1);
    //     //(row+1,col+1)
    //     if(i<n-1 && j+1<m && grid[i][j]<grid[i+1][j+1])
    //         ans=max(ans,solve(i+1,j+1,grid)+1);
    //     return dp[i][j]=ans;
    // }
    int solve(vector<vector<int>>& grid){
        // memset(dp,0,sizeof(dp));
       vector<int>next(1000+1,0);
        for(int j=m-1;j>=0;j--){
             vector<int>curr(1000+1,0);
            for(int i=n-1;i>=0;i--){
                 int ans=0;
                
                //(row col+1)
                if(j+1<m && grid[i][j]<grid[i][j+1])
                    ans=next[i]+1;
                //(row-1 ,col+1)
                if(i>=1 && j+1<m &&  grid[i][j]<grid[i-1][j+1])
                    ans=max(ans,next[i-1]+1);
                //(row+1,col+1)
                if(i<n-1 && j+1<m && grid[i][j]<grid[i+1][j+1])
                    ans=max(ans,next[i+1]+1);
                curr[i]=ans;
            }
            next=curr;
        }
       
        
        int ans=0;
       
        for(int i=0;i<n;i++){
            // ans=max(ans,dp[i][0]);
            ans=max(ans,next[i]);
        }
        return ans; 
            
       
        
    }
    int maxMoves(vector<vector<int>>& grid) {
        int ans=0;
        // memset(dp,-1,sizeof(dp));
        n=grid.size();
        m=grid[0].size();
        // for(int i=0;i<n;i++){
        //     ans=max(ans,solve(i,0,grid));
        // }
        return solve(grid);

        
    }
};
