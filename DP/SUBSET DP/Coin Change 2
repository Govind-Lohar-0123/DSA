
public class Solution {

	static long dp[][]=null;
	static long solve(int n,int tar,int nums[]){
		// if(tar==0)return 1;
		// if(n==0){
		// 	if(tar%nums[0]==0)return 1;
		// 	return 0;
		// }
		// if(dp[n][tar]!=-1)return dp[n][tar];
		// long cnt=0;
		// if(nums[n]<=tar)
		// 	cnt=solve(n,tar-nums[n],nums);
		// return dp[n][tar]=cnt+=solve(n-1,tar,nums);

		// tablulation
		// for(int i=0;i<n+1;i++){
		// 	for(int j=0;j<tar+1;j++){
		// 		if(j==0)dp[i][j]=1;
		// 		else if(i==0){
		// 			if(j%nums[0]==0)dp[i][j]=1;
		// 			else dp[i][j]=0;
		// 		}
				
		// 		else{
		// 			long cnt=0;
		// 			if(nums[i]<=j)
		// 				cnt=dp[(i)][j-nums[i]];
		// 			cnt+=dp[(i-1)][j];
		// 			dp[i][j]=cnt;
		// 		}
				

		// 	}
		// }
		// return dp[n][tar];

		// paceoptimization
		long prev[]=new long[tar+1];
		for(int i=0;i<n+1;i++){
			long curr[]=new long[tar+1];
			for(int j=0;j<tar+1;j++){
				if(j==0)curr[j]=1;
				else if(i==0){
					if(j%nums[0]==0)curr[j]=1;
					else curr[j]=0;
				}
				
				else{
					long cnt=0;
					if(nums[i]<=j)
						cnt=curr[j-nums[i]];
					cnt+=prev[j];
					curr[j]=cnt;
				}
				

			}
			prev=curr;
		}
		return prev[tar];

	}

	public static long countWaysToMakeChange(int denominations[], int value){
       	dp=new long[denominations.length][value+1];
		   for(int i=0;i<denominations.length;i++){
			   for(int j=0;j<value+1;j++){
				   dp[i][j]=-1;
			   }
		   }
		return solve(denominations.length-1,value,denominations);
	}
	
}
