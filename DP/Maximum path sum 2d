import java.util.* ;
import java.io.*; 
public class Solution {
    static long dp[][]=null;
    public static int minSumPath(int[][] grid) {
    	// Write your code here.
        int n=grid.length;
        int m=grid[0].length;
            dp=new long[n][m];
            // for(int i=0;i<n;i++){
            //     for(int j=0;j<m;j++){
            //         dp[i][j]=0;
            //     }
            // }

        return (int)minPath(grid.length-1,grid[0].length-1,grid);
    } 
    static long minPath(int n,int m,int grid[][]){
        // if(n==0&&m==0)return grid[0][0];
        // if(n<0||m<0)return Integer.MAX_VALUE;
        // if(dp[n][m]!=-1)return dp[n][m];
        // return dp[n][m]=Math.min(minPath(n-1,m,grid)+grid[n][m],minPath(n,m-1,grid)+grid[n][m]);
        
        //tablulation

        // for(int i=0;i<=n;i++){
            
        //     for(int j=0;j<=m;j++){
        //          if(i==0 && j==0) dp[0][0]=grid[0][0];
        //          else {
                    
        //             long up=Integer.MAX_VALUE;
        //             long left=Integer.MAX_VALUE;
        //             if(i>0)up=dp[i-1][j];
        //             if(j>0)left=dp[i][j-1];
        //            dp[i][j]=Math.min(up+grid[i][j],left+grid[i][j]);
        //         }
        //     }
        // }
       
        // return dp[n][m];

        // space optimization

        // long prev[]=new long[m+1];
        // for(int i=0;i<=n;i++){
        //     long curr[]=new long[m+1];
        //     for(int j=0;j<=m;j++){
        //          if(i==0 && j==0) curr[j]=grid[0][0];
        //          else {
                    
        //             long up=Integer.MAX_VALUE;
        //             long left=Integer.MAX_VALUE;
        //             if(i>0)up=prev[j];
        //             if(j>0)left=curr[j-1];
        //            curr[j]=Math.min(up+grid[i][j],left+grid[i][j]);
        //         }
        //     }
        //     prev=curr;
        // }
       
        // return prev[m];
    }
}
