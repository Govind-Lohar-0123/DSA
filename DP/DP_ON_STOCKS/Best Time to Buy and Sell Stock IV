import java.util.*;
import java.io.*;
----------------same as stock iii--------------------

using ll=long long;
class Solution {
public:
    int dp[10001][2][101];
    ll solve(int i,int turn,int k,vector<int>&arr){
        if(i>=arr.size())return 0;
        if(k==0)return 0;
        if(dp[i][turn][k]!=-1)return dp[i][turn][k];
        ll take=0;
        
        ll notTake=solve(i+1,turn,k,arr);
        if(turn==0) take=-arr[i] + solve(i+1,1,k,arr);
        else take=arr[i] + solve(i+1,0,k-1,arr);
        return dp[i][turn][k]=max(notTake,take);
    }
    int maxProfit(int k, vector<int>& arr) {
        int n=arr.size();
        memset(dp,-1,sizeof(dp));
        return (int)solve(0,0,k,arr);
    }
};
public class Solution {
    static int dp[][] = null;
   static int m=0;
    static int solve(int i, int trans, int[] arr) {
        // base condition
        if (i == arr.length || trans == m)
            return 0;

        // all stuffs
        if (dp[i][trans] != -1)
            return dp[i][trans];
        int ans = 0;
        if (trans % 2 == 0)
            ans = Math.max(-arr[i] + solve(i + 1, trans + 1, arr), solve(i + 1, trans, arr));
        else
            ans = Math.max(solve(i + 1, trans, arr), solve(i + 1, trans + 1, arr) + (arr[i]));
        return dp[i][trans] = ans;
    }

    public static int maximumProfit(int[] values, int n, int k) {
         dp = new int[values.length+1][k*2];
         m=2*k;
        for (int i = 0; i <values.length+1 ; i++) {
          for (int j = 0; j < k*2; j++) {
               dp[i][j]=-1;

            }
        }
      
        return (solve(0, 0, values));
    }
}
