class Solution {
    int dp[][]=new int[100+1][100+1];
    int solve(int i,int j,int[][]grid){
        // if(i<0 || j<0)return 0;
        // if(grid[i][j]==1)return 0;
        // if(i==0 && j==0)return 1;
        // if(dp[i][j]!=-1)return dp[i][j];
        // return dp[i][j]=(solve(i-1,j,grid)+solve(i,j-1,grid));

        //  without space optimazation
        int n=grid.length;
        int m=grid[0].length;
        int curr[]=new int[m];
        int prev[]=new int[m];

        for( i=0;i<n;i++){
            curr=new int[m];
            for(j=0;j<m;j++){
                
                if(grid[i][j]==1)curr[j]=0;
                else if(i==0 && j==0)curr[j]= 1;
                else {
                    curr[j]=((i>0)?prev[j]:0) + ((j>0)?curr[j-1]:0);
                }
            }
            prev=curr;
        }
        return prev[m-1];
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        dp=new int[100+1][100+1];
        for(int i=0;i<=100;i++){
            for(int j=0;j<=100;j++){
                dp[i][j]=-1;
            }
        }
        return solve(obstacleGrid.length-1,obstacleGrid[0].length-1,obstacleGrid);
    }
}
