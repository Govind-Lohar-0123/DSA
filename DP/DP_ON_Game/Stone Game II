class Solution {
public:

    int solve(int idx,int turn,int m,vector<int>&piles,vector<vector<vector<int>>>&dp){
        if(idx>=piles.size())return 0;
        long ans=INT_MAX;
        if(turn==0)ans=0; //alice turn
        int n=piles.size();
        int sum=0;
        int minLen=min(idx+(m*2),n);
        if(dp[idx][turn][m]!=-1)return dp[idx][turn][m];
        for(int i=idx;i<minLen;i++){
            sum+=piles[i];
            int temp=solve(i+1,(turn==1)?0:1,max(i-idx+1,m),piles,dp);
            if(turn==0) ans=max({ans,(long)temp+sum});
            else ans=min({ans,(long)temp});
        }
        return dp[idx][turn][m]=ans;
    }
    int stoneGameII(vector<int>& piles) {
        int n=piles.size();
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(n+1,-1)));
        return solve(0,0,1,piles,dp);
    }
};
