
//User function Template for Java
class Solution 
{   static int dp[][][]=null;
    static int solve(int n1,int n2,int n3,String a,String b,String c)
    {
        //     if(n1==0 || n2==0 || n3==0)return 0;
        //     if(dp[n1][n2][n3]!=-1)return dp[n1][n2][n3];
        //     if(a.charAt(n1-1) == b.charAt(n2-1) && b.charAt(n2-1) == c.charAt(n3-1))
        //         return solve(n1-1,n2-1,n3-1,a,b,c)+1;
        //     else {
        //         int arr[]={n1,n2,n3};
        //         int max=0;
        //         for(int i=0;i<3;i++){
        //             for(int j=0;j<3;j++){
        //                 arr[i]-=1;
        //                 if(i!=j)arr[j]-=1;
                        
        //                 max=Math.max(solve(arr[0],arr[1],arr[2],a,b,c),max);
        //                 arr[i]+=1;
        //                 if(i!=j)arr[j]+=1;
        //             }
        //         }
        //         return dp[n1][n2][n3]=max;
        //     }
        // }
    
                            // tabulation Approach
            
        //     for(int i=0;i<n1+1;i++){
        //         for(int j=0;j<n2+1;j++){
        //             for(int k=0;k<n3+1;k++){
        //                  if(i==0 || j==0 || k==0)dp[i][j][k]=0;
        //                  else {
        //                     if(a.charAt(i-1) == b.charAt(j-1) && b.charAt(j-1) == c.charAt(k-1))
        //                         dp[i][j][k]=dp[i-1][j-1][k-1]+1;
        //                     else {
        //                         int arr[]={i,j,k};
        //                         int max=0;
        //                         for(int i1=0;i1<3;i1++){
        //                             for(int j1=0;j1<3;j1++){
        //                                 arr[i1]-=1;
        //                                 if(i1!=j1)arr[j1]-=1;
                                        
        //                                 max=Math.max(dp[arr[0]][arr[1]][arr[2]],max);
        //                                 arr[i1]+=1;
        //                                 if(i1!=j1)arr[j1]+=1;
        //                             }
        //                         }
        //                      dp[i][j][k]=max;
        //                     }
                           
        //                 }
        //             }
        //         }
        //     }
        // return dp[n1][n2][n3];
                
                                   // SPACE OPTIMIZATION
        int prev[][]=new int[n2+1][n3+1];
        int curr[][]=new int[n2+1][n3+1];
        
        
         for(int i=0;i<n1+1;i++){
             curr=new int[n2+1][n3+1];
                for(int j=0;j<n2+1;j++){
                    for(int k=0;k<n3+1;k++){
                         if(i==0 || j==0 || k==0)curr[j][k]=0;
                         else {
                            if(a.charAt(i-1) == b.charAt(j-1) && b.charAt(j-1) == c.charAt(k-1))
                                curr[j][k]=prev[j-1][k-1]+1;
                            else {
                                int arr[]={i,j,k};
                                int max=0;
                                for(int i1=0;i1<3;i1++){
                                    for(int j1=0;j1<3;j1++){
                                        arr[i1]-=1;
                                        if(i1!=j1)arr[j1]-=1;
                                        
                                        if(i1==0)max=Math.max(prev[arr[1]][arr[2]],max);
                                        else max=Math.max(curr[arr[1]][arr[2]],max);
                                        arr[i1]+=1;
                                        if(i1!=j1)arr[j1]+=1;
                                    }
                                }
                             curr[j][k]=max;
                            }
                           
                        }
                    }
                   
                }
                 prev=curr;
            }
        return prev[n2][n3];
    }
    
    
    int LCSof3(String A, String B, String C, int n1, int n2, int n3) 
    { 
        dp=new int[n1+1][n2+1][n3+1];
        for(int i=0;i<n1+1;i++){
            for(int j=0;j<n2+1;j++){
                for(int k=0;k<n3+1;k++){
                    dp[i][j][k]=0;
                }
            }
        }
        return solve(n1,n2,n3,A,B,C);
    }
}
