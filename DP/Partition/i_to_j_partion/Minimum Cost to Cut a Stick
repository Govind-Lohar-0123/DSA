class Solution {
    int dp[][]=null;;

    int solve(int i,int j,ArrayList<Integer> cuts)
    {
        // if(i>j)return 0;
        // if(dp[i][j]!=-1)return dp[i][j];
        // int ans=Integer.MAX_VALUE;
        // for(int k=i;k<=j;k++){
        //     int temp=cuts.get(j+1)-cuts.get(i-1)+solve(i,k-1,cuts)+solve(k+1,j,cuts);
        //     ans=Math.min(ans,temp);
        // }
        // return dp[i][j]=ans;
        int n=cuts.size();
        for( i=n-1;i>=1;i--){
            for( j=i;j<=n-2;j++){
                
                int ans=Integer.MAX_VALUE;
                for(int k=i;k<=j;k++){
                    int temp=cuts.get(j+1)-cuts.get(i-1)+dp[i][k-1]+dp[k+1][j];
                    ans=Math.min(ans,temp);
                }
                dp[i][j]=ans;
            }
        }
        return dp[1][n-2];

    }
    public int minCost(int n, int[] arr) {
        Arrays.sort(arr);
        dp=new int[103][103];
        // for(int i=0;i<=102;i++){
        //     for(int j=0;j<=102;j++){
        //         dp[i][j]=-1;
        //     }
        // }
        ArrayList<Integer> cuts=new ArrayList<>();
        cuts.add(0);
        for(int it : arr)cuts.add(it);
        cuts.add(n);
        return solve(1,cuts.size()-2,cuts);
    }
}
