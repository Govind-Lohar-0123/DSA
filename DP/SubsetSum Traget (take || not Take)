import java.util.* ;
import java.io.*; 
public class Solution {
   
    static boolean SSS(int n,int arr[],int l,boolean dp[][]){
        // if(k==0)return true;
        // if(n==0)return (arr[0]==k);
        // if(dp[n][k])return dp[n][k];
        // boolean take=false;
        // if(arr[n]<=k)
        //     take=SSS(n-1,arr,k-arr[n],dp);
        // return dp[n][k]= take || SSS(n-1,arr,k,dp);

        // tabulation
        // for(int i=0;i<n+1;i++){
        //     for(int k=0;k<=l;k++){
        //        if(k==0)dp[i][k]=true;
        //        else if(i==0)dp[i][k]=(arr[i]==k)?true:false;
        //        else {
        //            boolean take=false;
        //            if(arr[i]<=k)take=dp[i-1][k-arr[i]];
        //            dp[i][k]= take || dp[i-1][k];
        //        }
        //     }
        // }
        //return dp[n][l];

        // space optimization
        // boolean prev[]=new boolean[l+1];
        //  for(int i=0;i<n+1;i++){
        //      boolean curr[]=new boolean[l+1];
        //     for(int k=0;k<=l;k++){
        //        if(k==0)curr[k]=true;
        //        else if(i==0)curr[k]=(arr[i]==k)?true:false;
        //        else {
        //            boolean take=false;
        //            if(arr[i]<=k)take=prev[k-arr[i]];
        //            curr[k]= take || prev[k];
        //        }
        //     }
        //     prev=curr;
        // }
        // return prev[l];
        

    }
    public static boolean subsetSumToK(int n, int k, int arr[]){
         boolean dp[][]=new boolean[n][k+1];
        return SSS(n-1,arr,k,dp);
    }
}
