public class Solution {
   
    public static int ninjaTraining(int n, int p[][]) {
       
            
        return meritPoint(n,p);
       
    }


    static int meritPoint(int n,int p[][]){
        // if(n==0){
        //     int max=0;
        //     for(int i=0;i<3;i++)
        //         if(idx!=i)max=Math.max(max,p[0][i]);
        //     return max;
            
        // }
        // int max=0;
        // if( dp[n][idx]!=-1)return dp[n][idx];
        // for(int i=0;i<3;i++){
        //     if(idx!=i){
        //         int temp=p[n][i]+meritPoint(n-1, i, p);
        //         max=Math.max(max,temp); 
        //     }
        // }
        // return  dp[n][idx]=max;
        
        // space optimization
        int prev[]=new int[4];
        prev[0]=Math.max(p[0][1],p[0][2]);
        prev[1]=Math.max(p[0][0],p[0][2]);
        prev[2]=Math.max(p[0][0],p[0][1]);
        prev[3]=Math.max(p[0][1],Math.max(p[0][2],p[0][0]));

        for(int day=1;day<n;day++){
            int temp[]=new int[4];
            for(int last=0;last<4;last++){
                temp[last]=0;
                for(int task=0;task<3;task++){
                    if(last!=task){
                        int point=p[day][task]+prev[task];
                        temp[last]=Math.max(temp[last],point);
                    }
                }
                
            }
            prev=temp;
        }
        return prev[3];
        
       

        
    }

}


AFTER AGAIN CODE



public class Solution {
    static int dp[][] = null;

    static int solve(int n, int taken, int point[][]) {
        // Recursive Approach

        // if(n==0){
        // // int max=0;
        // // for(int i=0;i<3;i++)
        // // if(taken!=i)max=Math.max(max,point[0][i]);
        // // return max;
        // return 0;
        // }
        // if(dp[n][taken]!=-1)return dp[n][taken];
        // int max=0;
        // for(int i=0;i<3;i++){
        // if(taken!=i){
        // int temp=point[n-1][i]+solve(n-1,i,point);
        // max=Math.max(max,temp);
        // }
        // }
        // return dp[n][taken]=max;

        
        int prev[]=new int[3+1];
        for (int i = 0; i < n + 1; i++) {
            int curr[]=new int[3+1];
            for (int j = 0; j < 4; j++) {
                if (i == 0) {
                    // int max=0;
                    // for(int i=0;i<3;i++)
                    // if(taken!=i)max=Math.max(max,point[0][i]);
                    // return max;
                   curr[j] = 0;
                    continue;
                }
                int max = 0;
                for (int k = 0; k < 3; k++) {
                    if (k !=j) {
                        int temp = point[i - 1][k] + prev[k];
                        max = Math.max(max, temp);
                    }
                }
                 curr[j] = max;
            }
            prev=curr;
        }

        return prev[3];

    }

    public static int ninjaTraining(int n, int points[][]) {
        dp = new int[n + 1][3 + 1];
        for (int i = 0; i < n + 1; i++) {
            for (int j = 0; j < 4; j++)
                dp[i][j] = -1;
        }
        return solve(n, 3, points);
    }

}
