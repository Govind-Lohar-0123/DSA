class Solution {
    int dp[][][]=null;
    int solve(int i,int j1,int j2,int [][]grid,int m){
        if(j1<0 || j2<0 ||j1>=m || j2>=m)return -1000;
        else if(i==grid.length-1){
            if(j1==j2)return grid[i][j1];
            return grid[i][j1]+grid[i][j2];
        }
        if(dp[i][j1][j2]!=-1)return dp[i][j1][j2];
        int max=Integer.MIN_VALUE;
        for(int d1=-1;d1<2;d1++){
            for(int d2=-1;d2<2;d2++){
                int temp=0;
               if(j1==j2)temp=solve(i+1,j1+d1,j2+d2,grid,m)+grid[i][j1];
               else temp=solve(i+1,j1+d1,j2+d2,grid,m)+grid[i][j1]+grid[i][j2];
                max=Math.max(temp,max);

            }
        }
        return dp[i][j1][j2]=max;
    }
    public int cherryPickup(int[][] grid) {
        dp=new int[grid.length][grid[0].length][grid[0].length];
        for(int i=0;i<grid.length;i++){
            for(int j1=0;j1<grid[0].length;j1++){
                for(int j2=0;j2<grid[0].length;j2++){
                    dp[i][j1][j2]=-1;
                }
            }
        }
        return solve(0,0,grid[0].length-1,grid,grid[0].length);
    }
}

//tabulation is still to write



