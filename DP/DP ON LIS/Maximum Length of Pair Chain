

1]Greedy Solution o(nlog)
2]4 approach dp
3]lis n^2
class Solution {
    int dp[][]=null;
    // int solve(int i,int last,int arr[][]){
        // if(i>=arr.length)return 0;
        // int ans=0;
        // if(dp[i][last]!=-1)return dp[i][last];
        // if(last==0 || arr[last-1][1]<arr[i][0])ans=solve(i+1,i+1,arr)+1;
        // return dp[i][last]=Math.max(ans,solve(i+1,last,arr));

        // for(i=arr.length;i>=0;i--){
        //     for(int j=0;j<=arr.length;j++){
        //         if(i>=arr.length)dp[i][j]=0;
        //         else {int ans=0;
                    
        //             if(j==0 || arr[j-1][1]<arr[i][0])ans=dp[i+1][i+1]+1;
        //             dp[i][j]=Math.max(ans,dp[i+1][j]);
        //         }
               
        //     }
        // }
        // return dp[0][0];

        //  int next[]=new int[1001];
        // for(i=arr.length;i>=0;i--){
        //     int curr[]=new int[1001];
        //     for(int j=0;j<=arr.length;j++){
        //         if(i>=arr.length)curr[j]=0;
        //         else {int ans=0;
                    
        //             if(j==0 || arr[j-1][1]<arr[i][0])ans=next[i+1]+1;
        //             curr[j]=Math.max(ans,next[j]);

        //         }

               
        //     }
        //     next=curr;
        // }
        // return next[0];
    // }
     static int lower_bound(List<Integer>arr,int x){
        int l=0,r=arr.size()-1;
        while(l<=r){
            int mid=(l+r)>>1;
            if(arr.get(mid)>x)r=mid-1;
            else l=mid+1;
        }
        return (r!=-1 && arr.get(r)==x)?r:l;
    }
     static int longestIncreasingSubsequence(int[][] arr, int n) {
        List<Integer> temp = new ArrayList<>();
        temp.add(arr[0][1]);

       

        for (int i = 1; i < n; i++) {
            if (arr[i][0] > temp.get(temp.size() - 1)) {
                temp.add(arr[i][1]);
                
            } else if(arr[i][0] < temp.get(temp.size() - 1)) {
                
                // int ind = Collections.binarySearch(temp, arr[i][1]);
                int ind=lower_bound(temp,arr[i][1]);
               
                if(ind>=temp.size())continue;
                temp.set(ind, arr[i][1]);
            }
        }
    return temp.size();
     }
     public int findLongestChain(int[][] arr) {
        
       Arrays.sort(arr,Comparator.comparingDouble((a)->a[0]));
       return longestIncreasingSubsequence(arr,arr.length);
       
    }
    // public int findLongestChain(int[][] arr) {
    //     // right Arrays.sort(arr,Comparator.comparingDouble((a)->a[1]));
    //     //left Arrays.sort(arr,Comparator.comparingDouble((a)->a[0]));
    //     int n=arr.length;
    //     int ans=0;
    //     int dp[]=new int[n];
    //     Arrays.fill(dp,1);
    //     for(int i=0;i<n;i++){
    //         for(int j=i-1;j>=0;j--){
    //             if(arr[i][0]>arr[j][1] && dp[i]<dp[j]+1)
    //                 dp[i]=dp[j]+1;
    //         }
    //         ans=Math.max(ans,dp[i]);
    //     }
    //     return ans;
    // }
    // public int findLongestChain(int[][] arr) {
    //      Arrays.sort(arr,Comparator.comparingDouble((a)->a[1]));
    //      int n=arr.length;
    //     dp=new int[n+1][n+1];
    //     // for(int i=0;i<n;i++){
    //     //     for(int j=0;j<n;j++){
    //     //         dp[i][j]=-1;
    //     //     }
    //     // }
    //      return solve(0,0,arr);
    // }
}




// class Solution {
//     public int findLongestChain(int[][] arr) {
//         Arrays.sort(arr,Comparator.comparingDouble((a)->a[1]));
//        for(int it [] : arr)System.out.print("("+it[0]+","+it[1]+" ");
//         int last=arr[0][1];
//         int ans=1;
//         for(int p[] : arr){
//             if(p[0]>last){
//                 ans++;last=p[1];
//             }
//         }
//         return ans;
//     }
// }
class Solution {
    public int findLongestChain(int[][] arr) {
        Arrays.sort(arr,Comparator.comparingDouble((a)->a[1]));
       for(int it [] : arr)System.out.print("("+it[0]+","+it[1]+" ");
        int last=arr[0][1];
        int ans=1;
        for(int p[] : arr){
            if(p[0]>last){
                ans++;last=p[1];
            }
        }
        return ans;
    }
}


class Solution {
    int dp[][]=null;
    // int solve(int i,int last,int arr[][]){
        // if(i>=arr.length)return 0;
        // int ans=0;
        // if(dp[i][last]!=-1)return dp[i][last];
        // if(last==0 || arr[last-1][1]<arr[i][0])ans=solve(i+1,i+1,arr)+1;
        // return dp[i][last]=Math.max(ans,solve(i+1,last,arr));

        // for(i=arr.length;i>=0;i--){
        //     for(int j=0;j<=arr.length;j++){
        //         if(i>=arr.length)dp[i][j]=0;
        //         else {int ans=0;
                    
        //             if(j==0 || arr[j-1][1]<arr[i][0])ans=dp[i+1][i+1]+1;
        //             dp[i][j]=Math.max(ans,dp[i+1][j]);
        //         }
               
        //     }
        // }
        // return dp[0][0];

        //  int next[]=new int[1001];
        // for(i=arr.length;i>=0;i--){
        //     int curr[]=new int[1001];
        //     for(int j=0;j<=arr.length;j++){
        //         if(i>=arr.length)curr[j]=0;
        //         else {int ans=0;
                    
        //             if(j==0 || arr[j-1][1]<arr[i][0])ans=next[i+1]+1;
        //             curr[j]=Math.max(ans,next[j]);

        //         }

               
        //     }
        //     next=curr;
        // }
        // return next[0];
    // }
    public int findLongestChain(int[][] arr) {
        //right Arrays.sort(arr,Comparator.comparingDouble((a)->a[1]));
        //left Arrays.sort(arr,Comparator.comparingDouble((a)->a[0]));
        int n=arr.length;
        int ans=0;
        int dp[]=new int[n];
        Arrays.fill(dp,1);
        for(int i=0;i<n;i++){
            for(int j=i-1;j>=0;j--){
                if(arr[i][0]>arr[j][1] && dp[i]<dp[j]+1)
                    dp[i]=dp[j]+1;
            }
            ans=Math.max(ans,dp[i]);
        }
        return ans;
    }
    // public int findLongestChain(int[][] arr) {
    //      Arrays.sort(arr,Comparator.comparingDouble((a)->a[1]));
    //      int n=arr.length;
    //     dp=new int[n+1][n+1];
    //     // for(int i=0;i<n;i++){
    //     //     for(int j=0;j<n;j++){
    //     //         dp[i][j]=-1;
    //     //     }
    //     // }
    //      return solve(0,0,arr);
    // }
}




// class Solution {
//     public int findLongestChain(int[][] arr) {
//         Arrays.sort(arr,Comparator.comparingDouble((a)->a[1]));
//        for(int it [] : arr)System.out.print("("+it[0]+","+it[1]+" ");
//         int last=arr[0][1];
//         int ans=1;
//         for(int p[] : arr){
//             if(p[0]>last){
//                 ans++;last=p[1];
//             }
//         }
//         return ans;
//     }
// }
