import java.util.*;
public class Solution {
	static int dp[][]=null;
	// static HashMap<String,Integer> map=new HashMap<>();?
	static int solve(int i,int prev_idx,int arr[]){
		// if(i>=arr.length)return 0;
	
		// if(dp[i][prev_idx]!=-1)return dp[i][prev_idx];
		// int ans=0;
		// if(prev_idx==0 || arr[prev_idx]<arr[i])ans=solve(i+1,i,arr)+1;
		// ans=Math.max(ans,solve(i+1,prev_idx,arr));
		
		// return dp[i][prev_idx]=ans;
		

		int dp[][]=new int [arr.length+2][arr.length+3];
		// for( i=arr.length-1;i>=0;i--){
		// 	for(int j=i-1;j>=-1;j--){
		// 		int ans=0;
		// 		if(j==-1 || arr[j]<arr[i])ans=dp[i+1][i+1]+1;
		// 		ans=Math.max(ans,dp[i+1][j+1]);
		// 		dp[i][j+1]=ans;
				
		// 	}
		// }
		// return dp[0][0];
		for( i=1;i<=arr.length;i++){
			for(int j=i;j<=arr.length;j++){
				int ans=0;
				if(j==arr.length || arr[j]>arr[i-1])ans=dp[i-1][i-1]+1;
				ans=Math.max(ans,dp[i-1][j]);
				dp[i][j]=ans;
				
			}
		}
		return dp[arr.length][arr.length];


		
	}

	public static int longestIncreasingSubsequence(int arr[]) {
		// dp=new int[100000+1][100000+2];
		// for(int i=0;i<=100000;i++){
		// 	for(int j=0;j<=100000+1;j++){
		// 		dp[i][j]=-1;
		// 	}
		// }
		return solve(0,0,arr);
	}

}
