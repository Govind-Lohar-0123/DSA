public class Solution {
    static long dp[][]=null;
   static long solve(int i,int buy,long[]arr){
        // //base condition
        // if(i==arr.length)return 0;

        // //all stuffs
        // if(dp[i][buy]!=-1)return dp[i][buy];
        // long ans=0;
        // if(buy==0) ans=Math.max(-arr[i]+solve(i+1,1,arr),solve(i+1,0,arr));
        // else ans=Math.max(solve(i+1,1,arr), solve(i+1,0,arr)+(arr[i]));
        // return dp[i][buy]=ans;

        // for(i=arr.length-1;i>=0;i--){
        //     for(int j=0;j<=1;j++){
        //          long ans=0;
        //         if(j==0) ans=Math.max(-arr[i]+dp[i+1][1],dp[i+1][0]);
        //         else ans=Math.max(dp[i+1][1],dp[i+1][0]+(arr[i]));
        //         dp[i][j]=ans;

        //     }
        // }
        // return dp[0][0];

        // long zero=0;
        // long one=0;
        // for(i=arr.length-1;i>=0;i--){
        //     for(int j=0;j<=1;j++){
        //          long ans=0;
        //         if(j==0) ans=Math.max(-arr[i]+one,zero);
        //         else ans=Math.max(one,zero+(arr[i]));
               
        //         if(j==0)zero=ans;
        //         else one=ans;

        //     }
        // } 
        // return zero;
    }
    public static long getMaximumProfit (int n, long[] values) {
     dp=new long[100000+1][2];
    //     for(int i=0;i<=100000;i++){
    //         for(int j=0;j<2;j++){
    //             dp[i][j]=-1;
    //         }
    //     }
        return solve(0,0,values);
    }
}
