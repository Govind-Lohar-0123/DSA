
 class Solu {
   static int mod=1000000007;
   static int dp[][]=new int[1000+1][1000+1];
   static String s, sub;

   static int solve(int n,int m){
        // if(m==0)return 1;
        // else if(n==0)return 0;
        // if(dp[n][m]!=-1)return dp[n][m];
        // int ans=0;
        // if(s.charAt(n-1)==sub.charAt(m-1))ans=solve(n-1,m-1)%mod;
        // ans=(ans+solve(n-1,m))%mod;
        // return dp[n][m]=ans;

        for(int i=0;i<=n;i++){
            for(int j=0;j<=m;j++){
                if(j==0)dp[i][j]=1;
                else if(i==0)dp[i][j]=0;
                else{
                    int ans=0;
                    if(s.charAt(i-1)==sub.charAt(j-1))ans=dp[(i-1)][j-1]%mod;
                    ans=(ans+dp[(i-1)][j])%mod;
                    dp[i][j]=ans;
                }
            }
        }
        // space optimization
        int prev[]=new int[m+1];
        int curr[]=new int[m+1];
        for(int i=0;i<=n;i++){
            curr=new int[m+1];
            for(int j=0;j<=m;j++){
                if(j==0)curr[j]=1;
                else if(i==0)curr[j]=0;
                else{
                    int ans=0;
                    if(s.charAt(i-1)==sub.charAt(j-1))ans=prev[j-1]%mod;
                    ans=(ans+prev[j])%mod;
                    curr[j]=ans;
                }

            }
            prev=curr;
        }
        return curr[m];
    }
    public static int distinctSubsequences(String str, String sb) {
        for(int i=0;i<=1000;i++){
            for(int j=0;j<=1000;j++){
                dp[i][j]=-1;
            }
        }
        s=str;sub=sb;
      return solve(str.length(),sb.length());
    }
}

class Solution {

    public int numDistinct(String s, String t) {
        Solu sl=new Solu();
        return sl.distinctSubsequences(s,t);
    }
}
