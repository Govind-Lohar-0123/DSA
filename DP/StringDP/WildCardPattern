
class Solu {

	int lps[]=new int[201];
	void kmp(String p){
	int n=p.length();
	lps=new int[n];
	int i=0,j=1;
	while(j<n){
	if(p.charAt(j)==p.charAt(i)){
	i++;
	lps[j]=i;
	j++;
	}
	else {
	if(i==0)lps[j++]=0;
	else i=lps[i-1];
	}
	}

	}

	// int dp[][] = new int[201][201];

	boolean solve(int n, int m, String s, String p) {
		// if (n == 0 && m == 0)
		// 	return true;
		// if (m == 0)
		// 	return false;
		// if (n == 0) {
		// 	int i = 0;
		// 	int j = m - 1;
		// 	// if(p.charAt(m-1)!='*' ||lps[m-1]!=m-1)return false;
		// 	for (i = m - 1; i >= 0; i--) {
		// 		if (p.charAt(i) != '*')
		// 			return false;
		// 	}
		// 	return true;
		// }
		// if (dp[n][m] != -1)
		// 	return (dp[n][m] == 0) ? false : true;

		// char ch = p.charAt(m - 1);
		// boolean isMatch = false;
		// if (ch == s.charAt(n - 1) || ch == '?')
		// 	isMatch = solve(n - 1, m - 1, s, p);
		// else if (ch == '*')
		// 	isMatch = solve(n - 1, m, s, p) || solve(n, m - 1, s, p);

		// dp[n][m] = (isMatch == true) ? 1 : 0;
		// return isMatch;
		// boolean dp[][]=new boolean[201][201];
		boolean prev[]=new boolean[201];
		boolean curr[]=new boolean[201];
		for (int i = 0; i <= n; i++) {
			curr=new boolean[201];
			for (int j = 0; j <= m; j++) {
				if (i == 0 && j == 0)
					curr[j] =true;
				else if (j == 0)
					curr[j] = false;
				else if (i== 0) {
					if(p.charAt(j-1)!='*' ||lps[j-1]!=j-1)curr[j]=false;
					else curr[j]=true;
					// for (int i = m - 1; i >= 0; i--) {
					// 	if (p.charAt(i) != '*') {
					// 		dp[i][j] = false;
					// 		break;
					// 	}
					// }
					// if(i<0)dp[i][j] = true;
				} else {
					char ch = p.charAt(j - 1);
					boolean isMatch = false;
					if (ch == s.charAt(i - 1) || ch == '?')
						isMatch =prev[ j - 1];
					else if (ch == '*')
						isMatch = prev[j] || curr[ j- 1];

					curr[j] = isMatch;
					
				}
			}
			prev=curr;
		}
		return curr[m];
	}

	public boolean isMatch(String s, String p) {
		// for (int i = 0; i < 201; i++) {
		// for (int j = 0; j < 201; j++) {
		// dp[i][j] = -1;
		// }
		// }
		kmp(p);
		return solve(s.length(), p.length(), s, p); 
		
		
	}
}

public class Solution {
	public static boolean wildcardMatching(String pattern, String text) {
		Solu s = new Solu();
		return s.isMatch(text, pattern);
	}
}
