import java.util.* ;
import java.io.*; 

public class Solution {
	static int dp[][]=null;
	static int maximumPathSum(int grid[][],int n,int m){
		// System.out.print("("+n+","+m+"), ");
		// if(n==0){
		//   return grid[n][m];
		// }
		// if(dp[n][m]!=-1)return dp[n][m];
		// int max=Integer.MIN_VALUE;
		// if(m-1>=0){
		// 	max=maximumPathSum(grid, n-1, m-1);
		// }
		// if(m+1<grid[0].length){
		// 	max=Math.max(max,maximumPathSum(grid, n-1, m+1));
		// }
		// max=Math.max(max,maximumPathSum(grid, n-1, m));
		// return dp[n][m]=max+grid[n][m];

		// TBULATION
		// for(int i=0;i<grid[0].length;i++)dp[0][i]=grid[0][i];

		// for(int i=1;i<n+1;i++){
		// 	int max=Integer.MIN_VALUE;
		// 	for(int j=0;j<m+1;j++){
		// 		if(j-1>=0)
		// 			max=dp[i-1][j-1];
		// 		if(j+1<grid[0].length)
		// 			max=Math.max(max,dp[i-1][j+1]);
		// 		max=Math.max(max,dp[i-1][j]);

		// 		dp[i][j]=Math.max(max+grid[i][j],dp[i][j]);
		// 	}
		// }
		// return dp[n][m];

		// TBULATION SPAWE OPTIMIZATION
		int prev[]=new int[grid[0].length];
		for(int i=0;i<grid[0].length;i++)prev[i]=grid[0][i];
		
		for(int i=1;i<n+1;i++){
			int max=Integer.MIN_VALUE;
			int curr[]=new int[grid[0].length];
			Arrays.fill(curr,Integer.MIN_VALUE);
			for(int j=0;j<m+1;j++){
				if(j-1>=0)
					max=prev[j-1];
				if(j+1<grid[0].length)
					max=Math.max(max,prev[j+1]);
				max=Math.max(max,prev[j]);

				curr[j]=Math.max(max+grid[i][j],curr[j]);
			}
			prev=curr;
		}
		return prev[m];
		
	}
    public static int getMaxPathSum(int[][] matrix) {
	
		int n=matrix.length-1;
		int m=matrix[0].length;
			// dp=new int[n+1][m];
			// for(int i=0;i<n+1;i++){
			// 	for(int j=0;j<m;j++){
			// 		dp[i][j]=Integer.MIN_VALUE;
			// 	}
			// }
		int ans=Integer.MIN_VALUE;
		for(int j=m-1;j>=0;j--)
		{ 	int temp=maximumPathSum(matrix, n, j);
			ans=Math.max(ans,temp);
			// System.out.print(temp+" ");
		}
		
		return ans;
	}
}
