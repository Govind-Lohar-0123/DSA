
1]variable size sliding window
2]finxed size slifin window
3]binary search



class Solution {
public:
    vector<vector<int>>dp;
    int map[26]={0};
    int getCount(int i,int mid){
        
        
       int temp[26]={0};
       for(int j=0;j<26;j++){
            temp[j]=dp[mid][j];
            if(i!=0)temp[j]-=dp[i-1][j];
        }
       
        
        for(int j=0;j<26;j++){
            if(temp[j]==map[j])continue;
            else if(temp[j]>map[j])return 1;
            else return 2;
        }
        return 3;
    }
    bool binarySearch(int i,int n,string &s){
        int l=i,r=n-1;
        while(l<=r){
            int mid=(l+r)>>1;
          
            int idx=getCount(i,mid);
           
            if(idx==1)r=mid-1;
            else if(idx==2)l=mid+1;
            else return true;
        }
        return false;
  }
    bool checkInclusion(string s1, string s2) {
        
        int n1=s1.size();
        int n2=s2.size();
        dp=vector<vector<int>>(n2,vector<int>(26,0));
        for(const auto&ch  : s1)map[ch-'a']++;
        // calculate prefficx sum
        dp[0][s2[0]-'a']++;
        for(int i=1;i<n2;i++){
            for(int j=0;j<26;j++)dp[i][j]=dp[i-1][j];
            dp[i][s2[i]-'a']++;
        }
        

        for(int i=0;i<n2;i++){
            int idx=binarySearch(i,n2,s2);
            if(idx==1)return true;
        }
        return false;
        
    }
};
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int map1[26];
        int map2[26];
        int cnt=0;
        int size=0;
        int k=0;
        for(char &ch : s1){
            map1[ch-'a']++;
            size++;
        }
        for(int i=0;i<26;i++){
            if(map1[i]!=0)k++;
        }
        
        
       
        int n=s2.size();
        int i=0,j=0;
        while(j<n){
            int ch=s2[j]-'a';
            map2[ch]++;
            if(map2[ch]==map1[ch])cnt++;
            if((j-i+1)==size){
                if(cnt==k)return true;
                map2[s2[i]-'a']--;
                if(map1[s2[i]-'a']==map2[s2[i]-'a']+1)cnt--;
                i++;
            }
            
            j++;
        }
        return false;
    }
};



class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int map1[26];
        int map2[26];
        int cnt=0;
        for(char &ch : s1)map1[ch-'a']++;
        int k=0;
        for(int i=0;i<26;i++){
            if(map1[i]!=0)k++;
        }
        int n=s2.size();
        int i=0,j=0;
        while(j<n){
            int ch=s2[j]-'a';
            map2[ch]++;
            if(map1[ch]==0){
                i=j+1;
                cnt=0;
                memset(map2,0,sizeof(map2));
                j++;
                continue;
            }
            if(map2[ch]==map1[ch])cnt++;
            while(map2[ch]>map1[ch]){
                int ch1=s2[i++]-'a';
                if(map2[ch1]==map1[ch1])cnt--;
                map2[ch1]--;
            }
            
            if(cnt==k)return true;
            j++;
        }
        return false;
    }
};
