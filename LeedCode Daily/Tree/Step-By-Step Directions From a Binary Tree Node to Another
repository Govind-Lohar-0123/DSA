1]find lca and do using path
2]withour lca but with the path
class Solution {

    private TreeNode lowestCommonAncestor(TreeNode root, int src, int dest) {
        if (root == null) {
            return null;
        }
        
        if (root.val == src || root.val == dest) {
            return root;
        }
        
        TreeNode left = lowestCommonAncestor(root.left, src, dest);
        TreeNode right = lowestCommonAncestor(root.right, src, dest);
        
        if (left != null && right != null) {
            return root;
        }
        
        return left != null ? left : right;
    }

    private boolean findPath(TreeNode node, int target, StringBuilder path) {
        if (node == null) {
            return false;
        }

        if (node.val == target) {
            return true;
        }

        path.append('L');
        if (findPath(node.left, target, path)) {
            return true;
        }
        path.deleteCharAt(path.length() - 1);

        path.append('R');
        if (findPath(node.right, target, path)) {
            return true;
        }
        path.deleteCharAt(path.length() - 1);

        return false;
    }

    public String getDirections(TreeNode root, int startValue, int destValue) {
        // TreeNode LCA = lowestCommonAncestor(root, startValue, destValue);

        StringBuilder lcaToStart = new StringBuilder();
        StringBuilder lcaToDest = new StringBuilder();
        
      
        findPath(root, startValue, lcaToStart);
        findPath(root, destValue, lcaToDest);
        int n=lcaToStart.length();
        int m=lcaToDest.length();
        int i=0;
      while(i<n && i<m && lcaToStart.charAt(i)==lcaToDest.charAt(i))i++;
        StringBuilder result = new StringBuilder();
        
        for (int j=i ;j< lcaToStart.length(); j++) {
            result.append('U');
        }
       
        
        result.append(lcaToDest,i,m);
    
        return result.toString();
    }
}
class Solution {

    private TreeNode lowestCommonAncestor(TreeNode root, int src, int dest) {
        if (root == null) {
            return null;
        }
        
        if (root.val == src || root.val == dest) {
            return root;
        }
        
        TreeNode left = lowestCommonAncestor(root.left, src, dest);
        TreeNode right = lowestCommonAncestor(root.right, src, dest);
        
        if (left != null && right != null) {
            return root;
        }
        
        return left != null ? left : right;
    }

    private boolean findPath(TreeNode node, int target, StringBuilder path) {
        if (node == null) {
            return false;
        }

        if (node.val == target) {
            return true;
        }

        path.append('L');
        if (findPath(node.left, target, path)) {
            return true;
        }
        path.deleteCharAt(path.length() - 1);

        path.append('R');
        if (findPath(node.right, target, path)) {
            return true;
        }
        path.deleteCharAt(path.length() - 1);

        return false;
    }

    public String getDirections(TreeNode root, int startValue, int destValue) {
        TreeNode LCA = lowestCommonAncestor(root, startValue, destValue);

        StringBuilder lcaToStart = new StringBuilder();
        StringBuilder lcaToDest = new StringBuilder();

        findPath(LCA, startValue, lcaToStart);
        findPath(LCA, destValue, lcaToDest);

        StringBuilder result = new StringBuilder();

        for (int i = 0; i < lcaToStart.length(); i++) {
            result.append('U');
        }

        result.append(lcaToDest);

        return result.toString();
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ArrayList<TreeNode> ans=new ArrayList<>();
    TreeNode LCA(TreeNode root,int s,int d){
        if(root==null)return null;
    
        if(root.val==s || root.val==d)return root;
        TreeNode left=LCA(root.left,s,d);
        TreeNode right=LCA(root.right,s,d);
        if(left!=null && right!=null)return root;
        else if(left==null)return right;
        else return left;
    }
   ArrayList<TreeNode> getPath(TreeNode root,int s,int d,ArrayList<TreeNode>temp){
        if(root==null)return ans;
        temp.add(root);
        if(root.val==s || root.val==d){
            ans=new ArrayList<>(temp);
            return ans;
        }
        getPath(root.left,s,d,temp);
        getPath(root.right,s,d,temp);
        temp.remove(temp.size()-1);
        return ans;
     }
     String solve(TreeNode lcs,ArrayList<TreeNode> left,ArrayList<TreeNode> right){
       
        String ans="";
        for(int i=0;i<left.size();i++)
            ans+="U";
        for(int i=0;i<right.size();i++){
            TreeNode temp=(i==0)?lcs : right.get(i-1);
            if(temp.left==right.get(i))ans+="L";
            else ans+="R";
        }
        return ans;
        
     }
    public String getDirections(TreeNode root, int s, int d) {
        TreeNode lca=LCA(root,s,d);
        ArrayList<TreeNode> left=getPath(lca.left,s,d,new ArrayList<>());
        ans=new ArrayList<>();
        ArrayList<TreeNode> right=getPath(lca.right,s,d,new ArrayList<>());       
        int n=left.size();
        int m=right.size();
      
        if(n!=0){
            if(left.get(n-1).val==s)return solve(lca,left,right);
            else return solve(lca,right,left);
        }
        else if(m!=0){
            if(right.get(m-1).val==s)return solve(lca,right,left);
            else return solve(lca,left,right);
        }
    
        return "";
    }
}
