1]simple 
2]LinkedList
3]Queue
4]Recursion imp
class Solution {
    int solve(int n,int k){
        if(n==1)return 0;
        return (solve(n-1,k)+k)%n;
    }
    public int findTheWinner(int n, int k) {
        return solve(n,k)+1;
    }
}

class Solution {
    public int findTheWinner(int n, int k) {
        LinkedList<Integer> arr=new LinkedList<>();
        for(int i=0;i<n;i++)arr.add(i+1);
        ListIterator<Integer> list=arr.listIterator();
        
        while(arr.size()>1){
            int t=k; 
            while(t!=0){
                while(list.hasNext() && t!=0){
                    list.next();
                    t--;
                }
                if(t!=0){
                    list=arr.listIterator();
                   
                }
            }
            list.remove();
        }
        return arr.get(0);

        
    }
}

class Solution {
    int winner( int i,ArrayList<Integer> arr,int k){
        if(arr.size()==1)return arr.get(0)+1;
        int ind=(i+k)%arr.size();
        arr.remove(ind);
        return winner(ind%arr.size(),arr,k);
    }
    public int findTheWinner(int n, int k) {
        ArrayList<Integer> ans=new ArrayList<>();
        for(int i=0;i<n;i++){
            ans.add(i);
        }
        return winner(0,ans,k-1);
    }
}
