Approaches:-
1]Simple Array with sort
2]with likedlist sort
3]heap sort by add node in heap
4]while loop n*n*n
5]recursio n*n*m   o(N)
6]with heap 

class GfG {
    Node flatten(Node root) {
        PriorityQueue<Node> pq=new PriorityQueue<>((a,b)->(a.data-b.data));
        Node curr=root;
        while(curr!=null){
            Node next=curr.next;
            curr.next=null;
            pq.add(curr);
            curr=next;
        }
      
        Node ans=new Node(0);
        Node temp=ans;
        while(pq.size()!=0){
            Node node=pq.remove();
           
            if(node.bottom!=null)pq.add(node.bottom);
            temp.bottom=node;
            temp=temp.bottom;
        }
    return ans.bottom;
    

ass GfG {
    Node solve(Node head){
        if(head==null || head.next==null)return head;
        Node temp=solve(head.next);
        return merge(head,temp);
    }
    Node merge(Node a,Node b){
        Node res=null;
        if(a==null)return b;
        if(b==null)return a;
        if(a.data<=b.data)
        {   res=a;
            res.bottom=merge(a.bottom,b);
        }
       else 
        {   res=b;
            res.bottom=merge(a,b.bottom);
        }
        return res;
    }
    Node flatten(Node root) {
       return solve(root);
    }
}
class GfG {
    Node solve(Node head){
        // if(head==null || head.next==null)return head;
        // Node temp=solve(head.next);
        // return merge(head,temp);
        if(head==null)return null;
        Node prev=head;
        Node curr=head.next;
        while(curr!=null){
             prev=merge(prev,curr);
             curr=curr.next;
        }
        return prev;
        
        
    }
    Node merge(Node a,Node b){
        Node res=null;
        if(a==null)return b;
        if(b==null)return a;
        if(a.data<=b.data)
        {   res=a;
            res.bottom=merge(a.bottom,b);
        }
       else 
        {   res=b;
            res.bottom=merge(a,b.bottom);
        }
        return res;
    }
    Node flatten(Node root) {
       return solve(root);
    }
}
    
        
