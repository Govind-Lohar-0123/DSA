

/////////////////last optimal///////////////////////
class Solution {
  public:
    Node* rotate(Node* head, int k) {
        Node* curr=head;
        int n=0;
        Node* tail=head;
        while(curr!=NULL){
            tail=curr;
            n++;
            curr=curr->next;
        }
        k=k%n;
        if(k==0)return head;
        
    
    curr=head;
    
    while(k!=1){
        curr=curr->next;
        k--;
        
    }
    Node* temp=curr->next;
    curr->next=NULL;
    tail->next=head;
    return temp;
  
        
    }
};








class Solution{
    //Function to rotate a linked list.
  
       
    public Node rotate(Node head, int k) {
        int n=0;
        if(head==null||head.next==null)return head;
        Node curr=head;
        while(curr!=null)
           { curr=curr.next;n++;}
        int rem=k%n;
        if(rem==0 )return head;
        curr=head;
        Node prevNode=curr;
        rem--;
        while(rem-->0)curr=curr.next;
        head=curr.next;
        curr.next=null;
        curr=head;
        while(curr.next!=null)curr=curr.next;
        curr.next=prevNode;
        return head;
    }
    
}
Approach 2
 Make last pomiter keep adding at last
ode* rotate(Node* head, int k) 
{ 
    // let us consider the example 
    // 10->20->30->40->50->60 - k=4 
    // initialising 2 nodes temp and last 
    Node* last = head; 
    Node* temp = head; 
  
    // if head is null or k==0 no rotation is required 
    if (head == NULL || k == 0) { 
        return head; 
    } 
  
    // Making last point to the last-node of the given 
    // linked list in this case 60 
    while (last->next != NULL) { 
        last = last->next; 
    } 
  
    // Rotating the linked list k times, one rotation at a 
    // time. 
    while (k) { 
  
        // Make head point to next of head 
        // so in the example given above head becomes 20 
        head = head->next; 
  
        // Making next of temp as NULL 
        // In the above example :10->NULL 
        temp->next = NULL; 
  
        // Making temp as last node 
        // (head)20->30->40->50->60->10(last) 
        last->next = temp; 
        last = temp; 
  
        // Point temp to head again for next rotation 
        temp = head; 
        k--; 
    } 
  
    return head; 
} 

lass Solution {
  public:
    Node* rotate(Node* head, int k) {
        Node* curr=head;
        int n=0;
        Node* tail=head;
        while(curr!=NULL){
            tail=curr;
            n++;
            curr=curr->next;
        }
        k=k%n;
        if(k==0)return head;
        
       
    curr=head;
    while(k!=0){
        Node* next=curr->next;
        curr->next=NULL;
        tail->next=curr;
        curr=next;
        tail=tail->next;
        k--;
        
    }
    return curr;
        
    }
};
