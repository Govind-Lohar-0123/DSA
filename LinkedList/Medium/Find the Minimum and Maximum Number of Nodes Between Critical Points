/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        int ans[]=new int[2];
        if(head==null)return new int[]{-1,-1};
        ListNode curr=head.next;
        ListNode prev=head;
        int f=-1,s=-1;
        int cnt=0;
        ans[0]=Integer.MAX_VALUE;
        ans[1]=Integer.MIN_VALUE;
        for(int i=1;(curr.next!=null);i++){
            if((curr.val>prev.val && curr.val>curr.next.val) ||(curr.val<prev.val && curr.val<curr.next.val)){          cnt++;
                if(f!=-1)ans[1]=Math.max(ans[1],(i-f));
                if(s!=-1)ans[0]=Math.min(ans[0],(i-s));
                if(f==-1)f=i;
                s=i;
            }
            prev=curr;
            curr=curr.next;
        }
        return (cnt>1)? ans : new int[]{-1,-1};
        
    }
}
